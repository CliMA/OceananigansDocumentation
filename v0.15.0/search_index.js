var documenterSearchIndex = {"docs":
[{"location":"subject_index/#Index-1","page":"Index","title":"Index","text":"","category":"section"},{"location":"subject_index/#","page":"Index","title":"Index","text":"","category":"page"},{"location":"generated/two_dimensional_turbulence/#","page":"Two-dimensional turbulence","title":"Two-dimensional turbulence","text":"EditURL = \"https://github.com/climate-machine/Oceananigans.jl/blob/master/examples/two_dimensional_turbulence.jl\"","category":"page"},{"location":"generated/two_dimensional_turbulence/#Two-dimensional-turbulence-example-1","page":"Two-dimensional turbulence","title":"Two dimensional turbulence example","text":"","category":"section"},{"location":"generated/two_dimensional_turbulence/#","page":"Two-dimensional turbulence","title":"Two-dimensional turbulence","text":"In this example, we initialize a random velocity field and observe its viscous, turbulent decay in a two-dimensional domain. This example demonstrates:","category":"page"},{"location":"generated/two_dimensional_turbulence/#","page":"Two-dimensional turbulence","title":"Two-dimensional turbulence","text":"How to run a model with no buoyancy equation or tracers;\nHow to create user-defined fields\nHow to use differentiation functions","category":"page"},{"location":"generated/two_dimensional_turbulence/#","page":"Two-dimensional turbulence","title":"Two-dimensional turbulence","text":"For this example, we need PyPlot for plotting and Statistics for setting up a random initial condition with zero mean velocity.","category":"page"},{"location":"generated/two_dimensional_turbulence/#","page":"Two-dimensional turbulence","title":"Two-dimensional turbulence","text":"using Oceananigans, Oceananigans.AbstractOperations, PyPlot, Statistics","category":"page"},{"location":"generated/two_dimensional_turbulence/#","page":"Two-dimensional turbulence","title":"Two-dimensional turbulence","text":"In addition to importing plotting and statistics packages, we import some types from Oceananigans that will aid in the calculation and visualization of voriticty.","category":"page"},{"location":"generated/two_dimensional_turbulence/#","page":"Two-dimensional turbulence","title":"Two-dimensional turbulence","text":"using Oceananigans: Face, Cell","category":"page"},{"location":"generated/two_dimensional_turbulence/#","page":"Two-dimensional turbulence","title":"Two-dimensional turbulence","text":"Face and Cell represent \"locations\" on the staggered grid. We instantiate the model with a simple isotropic diffusivity.","category":"page"},{"location":"generated/two_dimensional_turbulence/#","page":"Two-dimensional turbulence","title":"Two-dimensional turbulence","text":"model = Model(\n        grid = RegularCartesianGrid(size=(128, 128, 1), length=(2π, 2π, 2π)),\n    buoyancy = nothing,\n     tracers = nothing,\n     closure = ConstantIsotropicDiffusivity(ν=1e-3, κ=1e-3)\n)","category":"page"},{"location":"generated/two_dimensional_turbulence/#","page":"Two-dimensional turbulence","title":"Two-dimensional turbulence","text":"Our initial condition randomizes u and v. We also ensure that both have zero mean for purely aesthetic reasons.","category":"page"},{"location":"generated/two_dimensional_turbulence/#","page":"Two-dimensional turbulence","title":"Two-dimensional turbulence","text":"u₀ = rand(size(model.grid)...)\nu₀ .-= mean(u₀)\n\nset!(model, u=u₀, v=u₀)","category":"page"},{"location":"generated/two_dimensional_turbulence/#","page":"Two-dimensional turbulence","title":"Two-dimensional turbulence","text":"Next we create an object called an Operation that represents a vorticity calculation. We'll use this object to calculate vorticity on-line as the simulation progresses.","category":"page"},{"location":"generated/two_dimensional_turbulence/#","page":"Two-dimensional turbulence","title":"Two-dimensional turbulence","text":"u, v, w = model.velocities","category":"page"},{"location":"generated/two_dimensional_turbulence/#","page":"Two-dimensional turbulence","title":"Two-dimensional turbulence","text":"Create an object that represents the 'operation' required to compute vorticity.","category":"page"},{"location":"generated/two_dimensional_turbulence/#","page":"Two-dimensional turbulence","title":"Two-dimensional turbulence","text":"vorticity_operation = ∂x(v) - ∂y(u)","category":"page"},{"location":"generated/two_dimensional_turbulence/#","page":"Two-dimensional turbulence","title":"Two-dimensional turbulence","text":"The instance vorticity_operation is a binary subtraction between two derivative operations acting on OffsetArrays (the underyling representation of u, and v). In order to use vorticity_operation we create a field ω to store the result of the operation, and a Computation object for coordinate the computation of vorticity and storage in ω:","category":"page"},{"location":"generated/two_dimensional_turbulence/#","page":"Two-dimensional turbulence","title":"Two-dimensional turbulence","text":"ω = Field(Face, Face, Cell, model.architecture, model.grid)\n\nvorticity_computation = Computation(vorticity_operation, ω)","category":"page"},{"location":"generated/two_dimensional_turbulence/#","page":"Two-dimensional turbulence","title":"Two-dimensional turbulence","text":"We ask for computation of vorticity by writing","category":"page"},{"location":"generated/two_dimensional_turbulence/#","page":"Two-dimensional turbulence","title":"Two-dimensional turbulence","text":"compute!(vorticity_computation),","category":"page"},{"location":"generated/two_dimensional_turbulence/#","page":"Two-dimensional turbulence","title":"Two-dimensional turbulence","text":"as shown below.","category":"page"},{"location":"generated/two_dimensional_turbulence/#","page":"Two-dimensional turbulence","title":"Two-dimensional turbulence","text":"Finally, we run the model.","category":"page"},{"location":"generated/two_dimensional_turbulence/#","page":"Two-dimensional turbulence","title":"Two-dimensional turbulence","text":"fig, ax = subplots()\n\nfor i = 1:10\n    time_step!(model, Nt=100, Δt=1e-1)\n\n    compute!(vorticity_computation)\n\n    cla()\n    imshow(interior(ω)[:, :, 1])\n    ax.axis(\"off\")\n    pause(0.1)\nend","category":"page"},{"location":"generated/two_dimensional_turbulence/#","page":"Two-dimensional turbulence","title":"Two-dimensional turbulence","text":"We plot out the final vorticity field.","category":"page"},{"location":"generated/two_dimensional_turbulence/#","page":"Two-dimensional turbulence","title":"Two-dimensional turbulence","text":"gcf()","category":"page"},{"location":"generated/two_dimensional_turbulence/#","page":"Two-dimensional turbulence","title":"Two-dimensional turbulence","text":"This page was generated using Literate.jl.","category":"page"},{"location":"verification/taylor_green_vortex/#Taylor-Green-vortex-1","page":"Taylor-Green vortex","title":"Taylor-Green vortex","text":"","category":"section"},{"location":"verification/taylor_green_vortex/#","page":"Taylor-Green vortex","title":"Taylor-Green vortex","text":"An exact solution to the two-dimensional incompressible Navier-Stokes equations is given by \\citet{Taylor37} describing the unsteady flow of a vortex decaying under viscous dissipation. The viscous terms balance the time derivatives while the nonlinear advection terms balance the pressure gradient term. We use the doubly-periodic solution described by \\citet[p. 310]{Hesthaven07}","category":"page"},{"location":"verification/taylor_green_vortex/#","page":"Taylor-Green vortex","title":"Taylor-Green vortex","text":"beginaligned\n  u(x y t) = -sin(2pi y) e^-4pi^2nu t \n  v(x y t) =  sin(2pi x) e^-4pi^2nu t \n  p(x y t) = -cos(2pi x) cos(2pi y) e^-8pi^2nu t\nendaligned","category":"page"},{"location":"manual/pressure_decomposition/#Pressure-decomposition-1","page":"Pressure decomposition","title":"Pressure decomposition","text":"","category":"section"},{"location":"manual/pressure_decomposition/#","page":"Pressure decomposition","title":"Pressure decomposition","text":"In the numerical implementation of the momentum equations, the kinematic potential phi  is split into \"hydrostatic anomaly\" and \"non-hydrostatic\" parts via","category":"page"},{"location":"manual/pressure_decomposition/#","page":"Pressure decomposition","title":"Pressure decomposition","text":"    tageqpressure\n    phi(bmx t) = phi_rmhyd(bmx t) + phi_rmnon(bmx t)","category":"page"},{"location":"manual/pressure_decomposition/#","page":"Pressure decomposition","title":"Pressure decomposition","text":"The anomalous hydrostatic component of the kinematic potential is defined by ","category":"page"},{"location":"manual/pressure_decomposition/#","page":"Pressure decomposition","title":"Pressure decomposition","text":"    tageqhydrostaticpressure\n    partial_z phi_rmhyd equiv -b","category":"page"},{"location":"manual/pressure_decomposition/#","page":"Pressure decomposition","title":"Pressure decomposition","text":"such that the sum of the kinematic potential and buoyancy perturbation becomes","category":"page"},{"location":"manual/pressure_decomposition/#","page":"Pressure decomposition","title":"Pressure decomposition","text":"    -bmnabla phi + b bmhat z = \n        - bmnabla phi_rmnon\n        - big ( underbracepartial_x bmhat x + partial_y bmhat y _equiv bmnabla_ h big ) phi_rmhyd  ","category":"page"},{"location":"manual/pressure_decomposition/#","page":"Pressure decomposition","title":"Pressure decomposition","text":"The hydrostatic pressure anomaly is so named because the \"total\" hydrostatic pressure  contains additional components:","category":"page"},{"location":"manual/pressure_decomposition/#","page":"Pressure decomposition","title":"Pressure decomposition","text":"beginaligned\npartial_z phi_texttotal hydrostatic = - g left ( 1 + tfracrho_*rho_0 + tfracrhorho_0 right )   \n                                           = partial_z phi_rmhyd - g left ( 1 + tfracrho_*rho_0 right )  \nendaligned","category":"page"},{"location":"manual/pressure_decomposition/#","page":"Pressure decomposition","title":"Pressure decomposition","text":"Under this pressure decomposition the momentum equation becomes","category":"page"},{"location":"manual/pressure_decomposition/#","page":"Pressure decomposition","title":"Pressure decomposition","text":"   partial_t bmu + left ( bmu bmcdot bmnabla right ) bmu + bmf times bmu = \n    - bmnabla phi_rmnon - bmnabla_h phi_rmhyd - bmnabla bmcdot bmtau + bmF_u  ","category":"page"},{"location":"manual/pressure_decomposition/#","page":"Pressure decomposition","title":"Pressure decomposition","text":"Mathematically, the non-hydrostatic potential phi_rmnon enforces the incompressibility constraint.","category":"page"},{"location":"benchmarks/#Performance-benchmarks-1","page":"Benchmarks","title":"Performance benchmarks","text":"","category":"section"},{"location":"benchmarks/#","page":"Benchmarks","title":"Benchmarks","text":"The benchmarks/benchmarks.jl script can be run to benchmark Oceananigans.jl on your machine. The script times how long a single time step takes on the CPU and GPU using Float32 and Float64 for various model resolutions. It uses TimerOutputs.jl to nicely format the benchmarks. It also prints out CPU->GPU speedups and Float64->Float32 \"speedups\".","category":"page"},{"location":"benchmarks/#","page":"Benchmarks","title":"Benchmarks","text":"Right now it only benchmarks a simple \"static ocean\" configuration. The time stepping and Poisson solver still takes the same amount of time whether the ocean is static or active, so it should be indicative of actual performance.","category":"page"},{"location":"benchmarks/#","page":"Benchmarks","title":"Benchmarks","text":"Here is the script's output when run on a single-core of a Intel Xeon E5-2680 v4 @ 2.40 GHz CPU and on an Nvidia Tesla V100 GPU.","category":"page"},{"location":"benchmarks/#","page":"Benchmarks","title":"Benchmarks","text":"──────────────────────────────────────────────────────────────────────────────────────────────────\r\n            Oceananigans.jl benchmarks                    Time                   Allocations      \r\n                                                  ──────────────────────   ───────────────────────\r\n                Tot / % measured:                       227s / 45.6%           18.7GiB / 0.06%    \r\n\r\nSection                                   ncalls     time   %tot     avg     alloc   %tot      avg\r\n──────────────────────────────────────────────────────────────────────────────────────────────────\r\n256x256x256 static ocean (CPU, Float32)       10    54.4s  52.5%   5.44s   60.0KiB  0.48%  6.00KiB\r\n256x256x256 static ocean (CPU, Float64)       10    36.9s  35.6%   3.69s   77.8KiB  0.62%  7.78KiB\r\n128x128x128 static ocean (CPU, Float32)       10    6.38s  6.16%   638ms   60.0KiB  0.48%  6.00KiB\r\n128x128x128 static ocean (CPU, Float64)       10    4.04s  3.90%   404ms   77.8KiB  0.62%  7.78KiB\r\n 64x 64x 64 static ocean (CPU, Float32)       10    748ms  0.72%  74.8ms   60.0KiB  0.48%  6.00KiB\r\n 64x 64x 64 static ocean (CPU, Float64)       10    412ms  0.40%  41.2ms   77.8KiB  0.62%  7.78KiB\r\n256x256x256 static ocean (GPU, Float64)       10    284ms  0.27%  28.4ms   1.59MiB  12.9%   163KiB\r\n256x256x256 static ocean (GPU, Float32)       10    243ms  0.23%  24.3ms   1.35MiB  11.0%   139KiB\r\n 32x 32x 32 static ocean (CPU, Float32)       10   80.3ms  0.08%  8.03ms   60.0KiB  0.48%  6.00KiB\r\n 32x 32x 32 static ocean (CPU, Float64)       10   45.2ms  0.04%  4.52ms   77.8KiB  0.62%  7.78KiB\r\n128x128x128 static ocean (GPU, Float64)       10   35.9ms  0.03%  3.59ms   1.59MiB  12.9%   163KiB\r\n128x128x128 static ocean (GPU, Float32)       10   32.3ms  0.03%  3.23ms   1.35MiB  11.0%   139KiB\r\n 64x 64x 64 static ocean (GPU, Float64)       10   6.54ms  0.01%   654μs   1.59MiB  12.9%   163KiB\r\n 64x 64x 64 static ocean (GPU, Float32)       10   6.14ms  0.01%   614μs   1.35MiB  11.0%   139KiB\r\n 32x 32x 32 static ocean (GPU, Float64)       10   5.77ms  0.01%   577μs   1.59MiB  12.9%   163KiB\r\n 32x 32x 32 static ocean (GPU, Float32)       10   5.68ms  0.01%   568μs   1.35MiB  11.0%   139KiB\r\n──────────────────────────────────────────────────────────────────────────────────────────────────\r\n\r\nCPU Float64 -> Float32 speedup:\r\n32x 32x 32 static ocean: 0.562\r\n64x 64x 64 static ocean: 0.551\r\n128x128x128 static ocean: 0.633\r\n256x256x256 static ocean: 0.677\r\n\r\nGPU Float64 -> Float32 speedup:\r\n32x 32x 32 static ocean: 1.015\r\n64x 64x 64 static ocean: 1.066\r\n128x128x128 static ocean: 1.114\r\n256x256x256 static ocean: 1.167\r\n\r\nCPU -> GPU speedup:\r\n32x 32x 32 static ocean (Float32): 14.138\r\n32x 32x 32 static ocean (Float64): 7.829\r\n64x 64x 64 static ocean (Float32): 121.806\r\n64x 64x 64 static ocean (Float64): 62.924\r\n128x128x128 static ocean (Float32): 197.906\r\n128x128x128 static ocean (Float64): 112.417\r\n256x256x256 static ocean (Float32): 223.748\r\n256x256x256 static ocean (Float64): 129.923","category":"page"},{"location":"generated/internal_wave/#","page":"Internal wave","title":"Internal wave","text":"EditURL = \"https://github.com/climate-machine/Oceananigans.jl/blob/master/examples/internal_wave.jl\"","category":"page"},{"location":"generated/internal_wave/#Internal-wave-example-1","page":"Internal wave","title":"Internal wave example","text":"","category":"section"},{"location":"generated/internal_wave/#","page":"Internal wave","title":"Internal wave","text":"In this example, we initialize an internal wave packet in two-dimensions and watch is propagate.","category":"page"},{"location":"generated/internal_wave/#","page":"Internal wave","title":"Internal wave","text":"using Oceananigans, PyPlot, Printf","category":"page"},{"location":"generated/internal_wave/#Numerical,-domain,-and-internal-wave-parameters-1","page":"Internal wave","title":"Numerical, domain, and internal wave parameters","text":"","category":"section"},{"location":"generated/internal_wave/#","page":"Internal wave","title":"Internal wave","text":"First, we pick some numerical and physical parameters for our model and its rotation rate.","category":"page"},{"location":"generated/internal_wave/#","page":"Internal wave","title":"Internal wave","text":"Nx = 128 # resolution\nLx = 2π  # domain extent","category":"page"},{"location":"generated/internal_wave/#","page":"Internal wave","title":"Internal wave","text":"We set up an internal wave with the pressure field","category":"page"},{"location":"generated/internal_wave/#","page":"Internal wave","title":"Internal wave","text":"$ p(x, y, z, t) = a(x, z) cos(kx + mz - ω t) $.","category":"page"},{"location":"generated/internal_wave/#","page":"Internal wave","title":"Internal wave","text":"where m is the vertical wavenumber, k is the horizontal wavenumber, ω is the wave frequncy, and a(x, z) is a Gaussian envelope.","category":"page"},{"location":"generated/internal_wave/#","page":"Internal wave","title":"Internal wave","text":"# Non-dimensional internal wave parameters\nm = 16      # vertical wavenumber\nk = 1       # horizontal wavenumber\nN = 1       # buoyancy frequency\nf = 0.2     # inertial frequency","category":"page"},{"location":"generated/internal_wave/#A-Gaussian-wavepacket-1","page":"Internal wave","title":"A Gaussian wavepacket","text":"","category":"section"},{"location":"generated/internal_wave/#","page":"Internal wave","title":"Internal wave","text":"Next, we set up an initial condition corresponding to a propagating wave packet with a Gaussian envelope. The internal wave dispersion relation yields","category":"page"},{"location":"generated/internal_wave/#","page":"Internal wave","title":"Internal wave","text":"ω² = (N^2 * k^2 + f^2 * m^2) / (k^2 + m^2)\n\n# and thus\nω = sqrt(ω²)","category":"page"},{"location":"generated/internal_wave/#","page":"Internal wave","title":"Internal wave","text":"The internal wave polarization relations follow from the linearized Boussinesq equations,","category":"page"},{"location":"generated/internal_wave/#","page":"Internal wave","title":"Internal wave","text":"U = k * ω   / (ω^2 - f^2)\nV = k * f   / (ω^2 - f^2)\nW = m * ω   / (ω^2 - N^2)\nB = m * N^2 / (ω^2 - N^2)","category":"page"},{"location":"generated/internal_wave/#","page":"Internal wave","title":"Internal wave","text":"Finally, we set-up a small-amplitude, Gaussian envelope for the wave packet","category":"page"},{"location":"generated/internal_wave/#","page":"Internal wave","title":"Internal wave","text":"# Some Gaussian parameters\nA, x₀, z₀, δ = 1e-9, Lx/2, -Lx/2, Lx/15\n\n# A Gaussian envelope\na(x, z) = A * exp( -( (x - x₀)^2 + (z - z₀)^2 ) / 2δ^2 )","category":"page"},{"location":"generated/internal_wave/#","page":"Internal wave","title":"Internal wave","text":"Create initial condition functions","category":"page"},{"location":"generated/internal_wave/#","page":"Internal wave","title":"Internal wave","text":"u₀(x, y, z) = a(x, z) * U * cos(k*x + m*z)\nv₀(x, y, z) = a(x, z) * V * sin(k*x + m*z)\nw₀(x, y, z) = a(x, z) * W * cos(k*x + m*z)\nb₀(x, y, z) = a(x, z) * B * sin(k*x + m*z) + N^2 * z","category":"page"},{"location":"generated/internal_wave/#","page":"Internal wave","title":"Internal wave","text":"We are now ready to instantiate our model on a uniform grid. We give the model a constant rotation rate with background vorticity f, use temperature as a buoyancy tracer, and use a small constant viscosity and diffusivity to stabilize the model.","category":"page"},{"location":"generated/internal_wave/#","page":"Internal wave","title":"Internal wave","text":"model = Model(\n        grid = RegularCartesianGrid(size=(Nx, 1, Nx), length=(Lx, Lx, Lx)),\n     closure = ConstantIsotropicDiffusivity(ν=1e-6, κ=1e-6),\n    coriolis = FPlane(f=f),\n     tracers = :b,\n    buoyancy = BuoyancyTracer()\n)","category":"page"},{"location":"generated/internal_wave/#","page":"Internal wave","title":"Internal wave","text":"We initialize the velocity and buoyancy fields with our internal wave initial condition.","category":"page"},{"location":"generated/internal_wave/#","page":"Internal wave","title":"Internal wave","text":"set!(model, u=u₀, v=v₀, w=w₀, b=b₀)","category":"page"},{"location":"generated/internal_wave/#Some-plotting-utilities-1","page":"Internal wave","title":"Some plotting utilities","text":"","category":"section"},{"location":"generated/internal_wave/#","page":"Internal wave","title":"Internal wave","text":"To watch the wave packet propagate interactively as the model runs, we build some plotting utilities.","category":"page"},{"location":"generated/internal_wave/#","page":"Internal wave","title":"Internal wave","text":"xplot(u) = repeat(dropdims(xnodes(u), dims=2), 1, u.grid.Nz)\nzplot(u) = repeat(dropdims(znodes(u), dims=2), u.grid.Nx, 1)\n\nfunction plot_field!(ax, w, t)\n    pcolormesh(xplot(w), zplot(w), interior(model.velocities.w)[:, 1, :])\n    xlabel(L\"x\")\n    ylabel(L\"z\")\n    title(@sprintf(\"\\$ \\\\omega t / 2 \\\\pi = %.2f\\$\", t*ω/2π))\n    ax.set_aspect(1)\n    pause(0.1)\n    return nothing\nend\n\nclose(\"all\")\nfig, ax = subplots();","category":"page"},{"location":"generated/internal_wave/#A-wave-packet-on-the-loose-1","page":"Internal wave","title":"A wave packet on the loose","text":"","category":"section"},{"location":"generated/internal_wave/#","page":"Internal wave","title":"Internal wave","text":"Finally, we release the packet and plot its trajectory:","category":"page"},{"location":"generated/internal_wave/#","page":"Internal wave","title":"Internal wave","text":"for i = 1:10\n    time_step!(model, Nt = 200, Δt = 0.001 * 2π/ω)\n    plot_field!(ax, model.velocities.w, model.clock.time)\nend\n\ngcf()","category":"page"},{"location":"generated/internal_wave/#","page":"Internal wave","title":"Internal wave","text":"This page was generated using Literate.jl.","category":"page"},{"location":"manual/spatial_operators/#Spatial-operators-1","page":"Spatial operators","title":"Spatial operators","text":"","category":"section"},{"location":"manual/spatial_operators/#","page":"Spatial operators","title":"Spatial operators","text":"To calculate the various terms and perform the time-stepping, discrete difference and interpolation operators must be designed from which all the terms, such as momentum advection and Laplacian diffusion, may be constructed. Much of the material in this section is derived from \\citet{Marshall97FV}.","category":"page"},{"location":"manual/spatial_operators/#Differences-1","page":"Spatial operators","title":"Differences","text":"","category":"section"},{"location":"manual/spatial_operators/#","page":"Spatial operators","title":"Spatial operators","text":"Difference operators act as the discrete form of the derivative operator. Care must be taken when calculating differences on a staggered grid. For example, the the difference of a cell-centered variable such as temperature T lies on the faces  in the direction of the difference, and vice versa. In principle, there are three difference operators, one for each  direction","category":"page"},{"location":"manual/spatial_operators/#","page":"Spatial operators","title":"Spatial operators","text":"  delta_x f = f_E - f_W quad\n  delta_y f = f_N - f_S  quad\n  delta_z f = f_T - f_B ","category":"page"},{"location":"manual/spatial_operators/#","page":"Spatial operators","title":"Spatial operators","text":"where the E and W subscripts indicate that the value is evaluated the eastern or western wall of the cell, N and S indicate the northern and southern walls, and T and B indicate the top and bottom walls.","category":"page"},{"location":"manual/spatial_operators/#","page":"Spatial operators","title":"Spatial operators","text":"Additionally, two delta operators must be defined for each direction to account for the staggered nature of the grid. One for taking the difference of a cell-centered variable and projecting it onto the cell faces","category":"page"},{"location":"manual/spatial_operators/#","page":"Spatial operators","title":"Spatial operators","text":"beginaligned\n    delta_x^faa f_ijk = f_ijk - f_i-1jk \n    delta_y^afa f_ijk = f_ijk - f_ij-1k \n    delta_z^aaf f_ijk = f_ijk - f_ijk-1\nendaligned","category":"page"},{"location":"manual/spatial_operators/#","page":"Spatial operators","title":"Spatial operators","text":"and another for taking the difference of a face-centered variable and projecting it onto the cell centers","category":"page"},{"location":"manual/spatial_operators/#","page":"Spatial operators","title":"Spatial operators","text":"beginaligned\n    delta_x^caa f_ijk = f_i+1jk - f_ijk \n    delta_y^aca f_ijk = f_ij+1k - f_ijk \n    delta_z^aac f_ijk = f_ijk+1 - f_ijk\nendaligned","category":"page"},{"location":"manual/spatial_operators/#Interpolation-1","page":"Spatial operators","title":"Interpolation","text":"","category":"section"},{"location":"manual/spatial_operators/#","page":"Spatial operators","title":"Spatial operators","text":"In order to add or multiply variables that are defined at different points they are interpolated. In our case, linear interpolation or averaging is employed. Once again, there are two averaging operators, one for each direction, \\begin{equation}   \\overline{f}^x = \\frac{fE + fW}{2} , \\quad   \\overline{f}^y = \\frac{fN + fS}{2} , \\quad   \\overline{f}^z = \\frac{fT + fB}{2} \\end{equation}","category":"page"},{"location":"manual/spatial_operators/#","page":"Spatial operators","title":"Spatial operators","text":"Additionally, three averaging operators must be defined for each direction. One for taking the average of a cell-centered  variable and projecting it onto the cell faces","category":"page"},{"location":"manual/spatial_operators/#","page":"Spatial operators","title":"Spatial operators","text":"beginaligned\n    overlinef_ijk^faa = fracf_ijk + f_i-1jk2 \n    overlinef_ijk^afa = fracf_ijk + f_ij-1k2 \n    overlinef_ijk^aaf = fracf_ijk + f_ijk-12\nendaligned","category":"page"},{"location":"manual/spatial_operators/#","page":"Spatial operators","title":"Spatial operators","text":"and another for taking the average of a face-centered variable and projecting it onto the cell centers","category":"page"},{"location":"manual/spatial_operators/#","page":"Spatial operators","title":"Spatial operators","text":"beginaligned\n    overlinef_ijk^caa = fracf_i+1jk + f_ijk2 \n    overlinef_ijk^aca = fracf_ij+1k + f_ijk2 \n    overlinef_ijk^aac = fracf_ijk+1 + f_ijk2\nendaligned","category":"page"},{"location":"manual/spatial_operators/#Divergence-and-flux-divergence-1","page":"Spatial operators","title":"Divergence and flux divergence","text":"","category":"section"},{"location":"manual/spatial_operators/#","page":"Spatial operators","title":"Spatial operators","text":"The divergence of the flux of a cell-centered quantity over the cell can be calculated as","category":"page"},{"location":"manual/spatial_operators/#","page":"Spatial operators","title":"Spatial operators","text":"nabla cdot bmf\n= frac1V left delta_x^faa (A_x f_x)\n                   + delta_y^afa (A_y f_y)\n                   + delta_z^aaf (A_z f_z) right","category":"page"},{"location":"manual/spatial_operators/#","page":"Spatial operators","title":"Spatial operators","text":"where bmf = (f_x f_y f_z) is the flux with components defined normal to the faces, and V is the volume of the cell. The presence of a solid boundary is indicated by setting the appropriate flux normal to the boundary to zero.","category":"page"},{"location":"manual/spatial_operators/#","page":"Spatial operators","title":"Spatial operators","text":"A similar divergence operator can be defined for a face-centered quantity. The divergence of the flux of T over a cell,  nabla cdot (bmu T), required in the evaluation of G_T, for example, is then","category":"page"},{"location":"manual/spatial_operators/#","page":"Spatial operators","title":"Spatial operators","text":"renewcommanddiv1 nabla cdot left ( 1 right )\ndivbmu T\n= frac1V left delta_x^caa (A_x u overlineT^faa)\n                   + delta_y^aca (A_y v overlineT^afa)\n                   + delta_z^aac (A_z w overlineT^aaf) right","category":"page"},{"location":"manual/spatial_operators/#","page":"Spatial operators","title":"Spatial operators","text":"where T is interpolated onto the cell faces where it can be multiplied by the velocities, which are then differenced and  projected onto the cell centers where they added together and then added to G_T which also lives at the cell centers.","category":"page"},{"location":"manual/spatial_operators/#Momentum-advection-1","page":"Spatial operators","title":"Momentum advection","text":"","category":"section"},{"location":"manual/spatial_operators/#","page":"Spatial operators","title":"Spatial operators","text":"The advection terms that make up the mathbfG terms in equations \\eqref{eq:horizontalMomentum} and \\eqref{eq:verticalMomentum} can be mathematically written as, e.g,","category":"page"},{"location":"manual/spatial_operators/#","page":"Spatial operators","title":"Spatial operators","text":"renewcommanddiv1 nabla cdot left ( 1 right )\nbmu cdot nabla u\n    = divubmu - u(underbracenablacdotbmu_=0)\n    = divubmu","category":"page"},{"location":"manual/spatial_operators/#","page":"Spatial operators","title":"Spatial operators","text":"which can then be discretized similarly to the flux divergence operator, however, they must be discretized differently for each direction.","category":"page"},{"location":"manual/spatial_operators/#","page":"Spatial operators","title":"Spatial operators","text":"For example, the x-momentum advection operator is discretized as","category":"page"},{"location":"manual/spatial_operators/#","page":"Spatial operators","title":"Spatial operators","text":"bmu cdot nabla u\n= frac1overlineV^x left\n    delta_x^faa left( overlineA_x u^caa overlineu^caa right)\n  + delta_y^afa left( overlineA_y v^aca overlineu^aca right)\n  + delta_z^aaf left( overlineA_z w^aac overlineu^aac right)\nright","category":"page"},{"location":"manual/spatial_operators/#","page":"Spatial operators","title":"Spatial operators","text":"where overlineV^x is the average of the volumes of the cells on either side of the face in question. Calculating partial(uu)partial x can be performed by interpolating A_x u and u onto the cell centers then multiplying them and differencing them back onto the faces. However, in the case of the the two other terms, partial(vu)partial y and partial(wu)partial z, the two variables must be interpolated onto the cell edges to be multiplied then differenced back onto the cell faces.","category":"page"},{"location":"manual/spatial_operators/#Discretization-of-isotropic-diffusion-operators-1","page":"Spatial operators","title":"Discretization of isotropic diffusion operators","text":"","category":"section"},{"location":"manual/spatial_operators/#","page":"Spatial operators","title":"Spatial operators","text":"An isotropic viscosity operator acting on vertical momentum is discretized via","category":"page"},{"location":"manual/spatial_operators/#","page":"Spatial operators","title":"Spatial operators","text":"    bmnabla left ( nu_e bmnabla w right )\n    = frac1V left\n          delta_x^faa left( nu_e overlineA_x^caa delta_x^caa w right)\n        + delta_y^afa left( nu_e overlineA_y^aca delta_y^aca w right)\n        + delta_z^aaf left( nu_e overlineA_z^aac delta_z^aac w right)\n    right ","category":"page"},{"location":"manual/spatial_operators/#","page":"Spatial operators","title":"Spatial operators","text":"where nu is the kinematic viscosity.","category":"page"},{"location":"manual/spatial_operators/#","page":"Spatial operators","title":"Spatial operators","text":"An isotropic diffusion operator acting on a tracer c, on the other hand, is discretized via","category":"page"},{"location":"manual/spatial_operators/#","page":"Spatial operators","title":"Spatial operators","text":"   bmnabla bmcdot left ( kappa_e bmnabla c right ) =\n    = frac1V left\n        delta_x^caa left( kappa_e A_x delta_x^faa c right)\n      + delta_y^aca left( kappa_e A_y delta_y^afa c right)\n      + delta_z^aac left( kappa_e A_z delta_z^aaf c right)\n    right","category":"page"},{"location":"library/#Library-1","page":"Library","title":"Library","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"Documenting the public user interface.","category":"page"},{"location":"library/#Boundary-conditions-1","page":"Library","title":"Boundary conditions","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"Modules = [Oceananigans]\nPrivate = false\nPages   = [\"boundary_conditions.jl\"]","category":"page"},{"location":"library/#Oceananigans.BoundaryCondition","page":"Library","title":"Oceananigans.BoundaryCondition","text":"BoundaryCondition{C<:BCType}(condition)\n\nConstruct a boundary condition of type C with a condition that may be given by a number, an array, or a function with signature:\n\ncondition(i, j, grid, time, iteration, U, Φ, parameters) = # function definition\n\nthat returns a number and where i and j are indices along the boundary.\n\nBoundary condition types include Periodic, Flux, Value, Gradient, and NoPenetration.\n\n\n\n\n\n","category":"type"},{"location":"library/#Oceananigans.BoundaryFunction","page":"Library","title":"Oceananigans.BoundaryFunction","text":"BoundaryFunction{B, X1, X2, F}\n\nA wrapper for user-defined boundary condition functions.\n\n\n\n\n\n","category":"type"},{"location":"library/#Oceananigans.CoordinateBoundaryConditions","page":"Library","title":"Oceananigans.CoordinateBoundaryConditions","text":"CoordinateBoundaryConditions(left, right)\n\nA set of two BoundaryConditions to be applied along a coordinate x, y, or z.\n\nThe left boundary condition is applied on the negative or lower side of the coordinate while the right boundary condition is applied on the positive or higher side.\n\n\n\n\n\n","category":"type"},{"location":"library/#Oceananigans.Dirchlet","page":"Library","title":"Oceananigans.Dirchlet","text":"Dirchlet\n\nAn alias for the Value boundary condition type.\n\n\n\n\n\n","category":"type"},{"location":"library/#Oceananigans.FieldBoundaryConditions","page":"Library","title":"Oceananigans.FieldBoundaryConditions","text":"FieldBoundaryConditions\n\nAn alias for NamedTuple{(:x, :y, :z)} that represents a set of three CoordinateBoundaryConditions applied to a field along x, y, and z.\n\n\n\n\n\n","category":"type"},{"location":"library/#Oceananigans.FieldBoundaryConditions-Tuple{Any,Any,Any}","page":"Library","title":"Oceananigans.FieldBoundaryConditions","text":"FieldBoundaryConditions(x, y, z)\n\nConstruct a FieldBoundaryConditions using a CoordinateBoundaryCondition for each of the x, y, and z coordinates.\n\n\n\n\n\n","category":"method"},{"location":"library/#Oceananigans.Flux","page":"Library","title":"Oceananigans.Flux","text":"Flux\n\nA type specifying a boundary condition on the flux of a field.\n\n\n\n\n\n","category":"type"},{"location":"library/#Oceananigans.Gradient","page":"Library","title":"Oceananigans.Gradient","text":"Gradient\n\nA type specifying a boundary condition on the derivative or gradient of a field. Also called a Neumann boundary condition.\n\n\n\n\n\n","category":"type"},{"location":"library/#Oceananigans.Neumann","page":"Library","title":"Oceananigans.Neumann","text":"Neumann\n\nAn alias for the Gradient boundary condition type.\n\n\n\n\n\n","category":"type"},{"location":"library/#Oceananigans.Periodic","page":"Library","title":"Oceananigans.Periodic","text":"Periodic\n\nA type specifying a periodic boundary condition.\n\nA condition may not be specified with a Periodic boundary condition.\n\n\n\n\n\n","category":"type"},{"location":"library/#Oceananigans.Value","page":"Library","title":"Oceananigans.Value","text":"Value\n\nA type specifying a boundary condition on the value of a field. Also called a Dirchlet boundary condition.\n\n\n\n\n\n","category":"type"},{"location":"library/#Oceananigans.ChannelBCs-Tuple{}","page":"Library","title":"Oceananigans.ChannelBCs","text":"ChannelBCs(; north = BoundaryCondition(Flux, nothing),\n             south = BoundaryCondition(Flux, nothing),\n               top = BoundaryCondition(Flux, nothing),\n            bottom = BoundaryCondition(Flux, nothing))\n\nConstruct FieldBoundaryConditions with Periodic boundary conditions in the x direction and specified north (+y), south (-y), top (+z) and bottom (-z) boundary conditions for u, v, and tracer fields.\n\nChannelBCs cannot be applied to the the vertical velocity w.\n\n\n\n\n\n","category":"method"},{"location":"library/#Oceananigans.ChannelSolutionBCs-Tuple{}","page":"Library","title":"Oceananigans.ChannelSolutionBCs","text":"ChannelSolutionBCs(u=ChannelBCs(), ...)\n\nConstruct SolutionBoundaryConditions for a reentrant channel model configuration with solution fields u, v, w, T, and S specified by keyword arguments.\n\nBy default ChannelBCs are applied to u, v, T, and S and ChannelBCs(top=NoPenetrationBC(), bottom=NoPenetrationBC()) is applied to w.\n\nUse ChannelBCs when constructing non-default boundary conditions for u, v, w, T, S.\n\n\n\n\n\n","category":"method"},{"location":"library/#Oceananigans.HorizontallyPeriodicBCs-Tuple{}","page":"Library","title":"Oceananigans.HorizontallyPeriodicBCs","text":"HorizontallyPeriodicBCs(;   top = BoundaryCondition(Flux, nothing),\n                         bottom = BoundaryCondition(Flux, nothing))\n\nConstruct FieldBoundaryConditions with Periodic boundary conditions in the x and y directions and specified top (+z) and bottom (-z) boundary conditions for u, v, and tracer fields.\n\nHorizontallyPeriodicBCs cannot be applied to the the vertical velocity w.\n\n\n\n\n\n","category":"method"},{"location":"library/#Oceananigans.HorizontallyPeriodicSolutionBCs-Tuple{}","page":"Library","title":"Oceananigans.HorizontallyPeriodicSolutionBCs","text":"HorizontallyPeriodicSolutionBCs(u=HorizontallyPeriodicBCs(), ...)\n\nConstruct SolutionBoundaryConditions for a horizontally-periodic model configuration with solution fields u, v, w, T, and S specified by keyword arguments.\n\nBy default HorizontallyPeriodicBCs are applied to u, v, T, and S and HorizontallyPeriodicBCs(top=NoPenetrationBC(), bottom=NoPenetrationBC()) is applied to w.\n\nUse HorizontallyPeriodicBCs when constructing non-default boundary conditions for u, v, w, T, S.\n\n\n\n\n\n","category":"method"},{"location":"library/#Oceananigans.SolutionBoundaryConditions-Tuple{Any,Any}","page":"Library","title":"Oceananigans.SolutionBoundaryConditions","text":"SolutionBoundaryConditions(tracers, proposal_bcs)\n\nConstruct a NamedTuple of FieldBoundaryConditions for a model with fields u, v, w, and tracers from the proposal boundary conditions proposal_bcs, which must contain the boundary conditions on u, v, and w and may contain some or all of the boundary conditions on tracers.\n\n\n\n\n\n","category":"method"},{"location":"library/#Buoyancy-1","page":"Library","title":"Buoyancy","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"Modules = [Oceananigans]\nPrivate = false\nPages   = [\"buoyancy.jl\"]","category":"page"},{"location":"library/#Oceananigans.BuoyancyTracer","page":"Library","title":"Oceananigans.BuoyancyTracer","text":"BuoyancyTracer <: AbstractBuoyancy{Nothing}\n\nType indicating that the tracer b represents buoyancy.\n\n\n\n\n\n","category":"type"},{"location":"library/#Oceananigans.LinearEquationOfState","page":"Library","title":"Oceananigans.LinearEquationOfState","text":"LinearEquationOfState{FT} <: AbstractEquationOfState\n\nLinear equation of state for seawater.\n\n\n\n\n\n","category":"type"},{"location":"library/#Oceananigans.LinearEquationOfState","page":"Library","title":"Oceananigans.LinearEquationOfState","text":"LinearEquationOfState([FT=Float64;] α=1.67e-4, β=7.80e-4)\n\nReturns parameters for a linear equation of state for seawater with thermal expansion coefficient α [K⁻¹] and haline contraction coefficient β [ppt⁻¹]. The buoyancy perturbation associated with a linear equation of state is\n\n    b = g (α T - β S)\n\nDefault constants are taken from Table 1.2 (page 33) of Vallis, \"Atmospheric and Oceanic Fluid Dynamics: Fundamentals and Large-Scale Circulation\" (2ed, 2017).\n\n\n\n\n\n","category":"type"},{"location":"library/#Oceananigans.SeawaterBuoyancy","page":"Library","title":"Oceananigans.SeawaterBuoyancy","text":"SeawaterBuoyancy{G, EOS} <: AbstractBuoyancy{EOS}\n\nBuoyancy model for temperature- and salt-stratified seawater.\n\n\n\n\n\n","category":"type"},{"location":"library/#Oceananigans.SeawaterBuoyancy","page":"Library","title":"Oceananigans.SeawaterBuoyancy","text":"SeawaterBuoyancy([FT=Float64;] gravitational_acceleration = g_Earth,\n                              equation_of_state = LinearEquationOfState(FT))\n\nReturns parameters for a temperature- and salt-stratified seawater buoyancy model with a gravitational_acceleration constant (typically called 'g'), and an equation_of_state that related temperature and salinity (or conservative temperature and absolute salinity) to density anomalies and buoyancy.\n\n\n\n\n\n","category":"type"},{"location":"library/#Clock-1","page":"Library","title":"Clock","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"Modules = [Oceananigans]\nPrivate = false\nPages   = [\"clock.jl\"]","category":"page"},{"location":"library/#Oceananigans.Clock","page":"Library","title":"Oceananigans.Clock","text":"Clock{T<:Number}\n\nClock{T}(time, iteration)\n\nKeeps track of the current time and iteration number.\n\n\n\n\n\n","category":"type"},{"location":"library/#Coriolis-1","page":"Library","title":"Coriolis","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"Modules = [Oceananigans]\nPrivate = false\nPages   = [\"coriolis.jl\"]","category":"page"},{"location":"library/#Oceananigans.BetaPlane","page":"Library","title":"Oceananigans.BetaPlane","text":"BetaPlane{T} <: AbstractRotation\n\nA parameter object for meridionally increasing Coriolis parameter (f = f₀ + βy).\n\n\n\n\n\n","category":"type"},{"location":"library/#Oceananigans.BetaPlane","page":"Library","title":"Oceananigans.BetaPlane","text":"BetaPlane([T=Float64;] f₀=nothing, β=nothing, \n                       rotation_rate=nothing, latitude=nothing, radius=nothing)\n\nA parameter object for meridionally increasing Coriolis parameter (f = f₀ + βy).\n\nThe user may specify both f₀ and β, or the three parameters rotation_rate, latitude, and radius that specify the rotation rate and radius  of a planet, and the central latitude at which the β-plane approximation is to be made.\n\n\n\n\n\n","category":"type"},{"location":"library/#Oceananigans.FPlane","page":"Library","title":"Oceananigans.FPlane","text":"FPlane{FT} <: AbstractRotation\n\nA parameter object for constant rotation around a vertical axis.\n\n\n\n\n\n","category":"type"},{"location":"library/#Oceananigans.FPlane","page":"Library","title":"Oceananigans.FPlane","text":"FPlane([FT=Float64;] f=nothing, rotation_rate=nothing, latitude=nothing)\n\nReturns a parameter object for constant rotation at the angular frequency f/2, and therefore with background vorticity f, around a vertical axis. If f is not specified, it is calculated from rotation_rate and latitude according to the relation `f = 2rotation_ratesind(latitude).\n\nAlso called FPlane, after the \"f-plane\" approximation for the local effect of Earth's rotation in a planar coordinate system tangent to the Earth's surface.\n\n\n\n\n\n","category":"type"},{"location":"library/#Diagnostics-1","page":"Library","title":"Diagnostics","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"Modules = [Oceananigans]\nPrivate = false\nPages   = [\"diagnostics.jl\"]","category":"page"},{"location":"library/#Fields-1","page":"Library","title":"Fields","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"Modules = [Oceananigans]\nPrivate = false\nPages   = [\"fields.jl\"]","category":"page"},{"location":"library/#Oceananigans.Field","page":"Library","title":"Oceananigans.Field","text":"Field{X, Y, Z, A, G} <: AbstractLocatedField{X, Y, Z, A, G}\n\nA field defined at the location (X, Y, Z) which can be either Cell or Face.\n\n\n\n\n\n","category":"type"},{"location":"library/#Oceananigans.Field-Tuple{Any,Any,Any,Oceananigans.AbstractArchitecture,Any}","page":"Library","title":"Oceananigans.Field","text":"Field(X, Y, Z, arch::AbstractArchitecture, grid)\n\nConstruct a Field on architecture arch and grid at location X, Y, Z, where each of X, Y, Z is Cell or Face.\n\n\n\n\n\n","category":"method"},{"location":"library/#Oceananigans.Field-Tuple{Tuple,AbstractArray,Any}","page":"Library","title":"Oceananigans.Field","text":"Field(L::Tuple, data::AbstractArray, grid)\n\nConstruct a Field on grid using the array data with location defined by the tuple L of length 3 whose elements are Cell or Face.\n\n\n\n\n\n","category":"method"},{"location":"library/#Oceananigans.Field-Tuple{Tuple,Oceananigans.AbstractArchitecture,Any}","page":"Library","title":"Oceananigans.Field","text":"Field(L::Tuple, arch::AbstractArchitecture, grid)\n\nConstruct a Field on architecture arch and grid at location L, where L is a tuple of Cell or Face types.\n\n\n\n\n\n","category":"method"},{"location":"library/#Oceananigans.CellField-Tuple{Any,Any,Any}","page":"Library","title":"Oceananigans.CellField","text":"CellField([T=eltype(grid)], arch, grid)\n\nReturn a Field{Cell, Cell, Cell} on architecture arch and grid. Used for tracers and pressure fields.\n\n\n\n\n\n","category":"method"},{"location":"library/#Oceananigans.FaceFieldX-Tuple{Any,Any,Any}","page":"Library","title":"Oceananigans.FaceFieldX","text":"FaceFieldX([T=eltype(grid)], arch, grid)\n\nReturn a Field{Face, Cell, Cell} on architecture arch and grid. Used for the x-velocity field.\n\n\n\n\n\n","category":"method"},{"location":"library/#Oceananigans.FaceFieldY-Tuple{Any,Any,Any}","page":"Library","title":"Oceananigans.FaceFieldY","text":"FaceFieldY([T=eltype(grid)], arch, grid)\n\nReturn a Field{Cell, Face, Cell} on architecture arch and grid. Used for the y-velocity field.\n\n\n\n\n\n","category":"method"},{"location":"library/#Oceananigans.FaceFieldZ-Tuple{Any,Any,Any}","page":"Library","title":"Oceananigans.FaceFieldZ","text":"FaceFieldZ([T=eltype(grid)], arch, grid)\n\nReturn a Field{Cell, Cell, Face} on architecture arch and grid. Used for the z-velocity field.\n\n\n\n\n\n","category":"method"},{"location":"library/#Oceananigans.interior-Tuple{Field}","page":"Library","title":"Oceananigans.interior","text":"Returns a view over the interior points of the field.data.\n\n\n\n\n\n","category":"method"},{"location":"library/#Oceananigans.set!-Tuple{Oceananigans.AbstractField{A,G} where G where A<:(OffsetArrays.OffsetArray{T,D,#s70} where #s70<:Array where D where T),Array}","page":"Library","title":"Oceananigans.set!","text":"Set the CPU field u to the array v.\n\n\n\n\n\n","category":"method"},{"location":"library/#Oceananigans.set!-Tuple{Oceananigans.AbstractField{A,G} where G where A<:(OffsetArrays.OffsetArray{T,D,#s70} where #s70<:Array where D where T),Function}","page":"Library","title":"Oceananigans.set!","text":"Set the CPU field u data to the function f(x, y, z).\n\n\n\n\n\n","category":"method"},{"location":"library/#Oceananigans.set!-Tuple{Oceananigans.AbstractModel}","page":"Library","title":"Oceananigans.set!","text":"set!(model; kwargs...)\n\nSet velocity and tracer fields of model. The keyword arguments kwargs... take the form name=data, where name refers to one of the fields of model.velocities or model.tracers, and the data may be an array, a function with arguments (x, y, z), or any data type for which a set!(ϕ::AbstractField, data) function exists.\n\nExample\n\nmodel = Model(grid=RegularCartesianGrid(size=(32, 32, 32), length=(1, 1, 1))\n\n# Set u to a parabolic function of z, v to random numbers damped\n# at top and bottom, and T to some silly array of half zeros,\n# half random numbers.\n\nu₀(x, y, z) = z/model.grid.Lz * (1 + z/model.grid.Lz)\nv₀(x, y, z) = 1e-3 * rand() * u₀(x, y, z)\n\nT₀ = rand(size(model.grid)...)\nT₀[T₀ .< 0.5] .= 0\n\nset!(model, u=u₀, v=v₀, T=T₀)\n\n\n\n\n\n","category":"method"},{"location":"library/#Forcing-1","page":"Library","title":"Forcing","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"Modules = [Oceananigans]\nPrivate = false\nPages   = [\"forcing.jl\"]","category":"page"},{"location":"library/#Oceananigans.SimpleForcing","page":"Library","title":"Oceananigans.SimpleForcing","text":"SimpleForcing{X, Y, Z, F, P}\n\nCallable object for specifying 'simple' forcings of x, y, z, t and optionally parameters of type P at location X, Y, Z.\n\n\n\n\n\n","category":"type"},{"location":"library/#Oceananigans.SimpleForcing-Tuple{Tuple,Function}","page":"Library","title":"Oceananigans.SimpleForcing","text":"SimpleForcing([location=(Cell, Cell, Cell),] forcing; parameters=nothing)\n\nConstruct forcing for a field at location using forcing::Function, and optionally with parameters. If parameters=nothing, forcing must have the signature\n\n`forcing(x, y, z, t)`;\n\notherwise it must have the signature\n\n`forcing(x, y, z, t, parameters)`.\n\nExamples\n\njulia> const a = 2.1\n\njulia> fun_forcing(x, y, z, t) = a * exp(z) * cos(t)\n\njulia> u_forcing = SimpleForcing(fun_forcing)\n\njulia> parameterized_forcing(x, y, z, t, p) = p.μ * exp(z/p.λ) * cos(p.ω*t)\n\njulia> v_forcing = SimpleForcing(parameterized_forcing, parameters=(μ=42, λ=0.1, ω=π))\n\n\n\n\n\n","category":"method"},{"location":"library/#Oceananigans.ModelForcing-Tuple{}","page":"Library","title":"Oceananigans.ModelForcing","text":"ModelForcing(; u=zeroforcing, v=zeroforcing, w=zeroforcing, tracer_forcings...)\n\nReturn a named tuple of forcing functions for each solution field.\n\nExample\n\njulia> u_forcing = SimpleForcing((x, y, z, t) -> exp(z) * cos(t))\n\njulia> model = Model(forcing=ModelForcing(u=u_forcing))\n\n\n\n\n\n","category":"method"},{"location":"library/#Grids-1","page":"Library","title":"Grids","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"Modules = [Oceananigans]\nPrivate = false\nPages   = [\"grids.jl\"]","category":"page"},{"location":"library/#Models-1","page":"Library","title":"Models","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"Modules = [Oceananigans]\nPrivate = false\nPages   = [\"models.jl\"]","category":"page"},{"location":"library/#Oceananigans.Model-Tuple{}","page":"Library","title":"Oceananigans.Model","text":"Model(; grid, kwargs...)\n\nConstruct an Oceananigans.jl model on grid.\n\nKeyword arguments\n\ngrid: (required) The resolution and discrete geometry on which model is solved. Currently the only option is RegularCartesianGrid.\narchitecture: CPU() or GPU(). The computer architecture used to time-step model.\nfloat_type: Float32 or Float64. The floating point type used for model data.\nclosure: The turbulence closure for model. See TurbulenceClosures.\nbuoyancy: Buoyancy model parameters.\ncoriolis: Parameters for the background rotation rate of the model.\nforcing: User-defined forcing functions that contribute to solution tendencies.\nboundary_conditions: User-defined boundary conditions for model fields. Can be eitherSolutionBoundaryConditions or ModelBoundaryConditions. See BoundaryConditions, HorizontallyPeriodicSolutionBCs, and ChannelSolutionBCs.\nparameters: User-defined parameters for use in user-defined forcing functions and boundary condition functions.\n\n\n\n\n\n","category":"method"},{"location":"library/#Oceananigans.ChannelModel-Tuple{}","page":"Library","title":"Oceananigans.ChannelModel","text":"ChannelModel(; kwargs...)\n\nConstruct a Model with walls in the y-direction. This is done by imposing FreeSlip boundary conditions in the y-direction instead of Periodic.\n\nkwargs are passed to the regular Model constructor.\n\n\n\n\n\n","category":"method"},{"location":"library/#Oceananigans.NonDimensionalModel-Tuple{}","page":"Library","title":"Oceananigans.NonDimensionalModel","text":"NonDimensionalModel(; N, L, Re, Pr=0.7, Ro=Inf, float_type=Float64, kwargs...)\n\nConstruct a \"Non-dimensional\" Model with resolution N, domain extent L, precision float_type, and the four non-dimensional numbers:\n\n* `Re = U λ / ν` (Reynolds number)\n* `Pr = U λ / κ` (Prandtl number)\n* `Ro = U / f λ` (Rossby number)\n\nfor characteristic velocity scale U, length-scale λ, viscosity ν, tracer diffusivity κ, and Coriolis parameter f. Buoyancy is scaled with λ U², so that the Richardson number is Ri=B, where B is a non-dimensional buoyancy scale set by the user via initial conditions or forcing.\n\nNote that N, L, and Re are required.\n\nAdditional kwargs are passed to the regular Model constructor.\n\n\n\n\n\n","category":"method"},{"location":"library/#Output-writers-1","page":"Library","title":"Output writers","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"Modules = [Oceananigans]\nPrivate = false\nPages   = [\"output_writers.jl\"]","category":"page"},{"location":"library/#Time-steppers-1","page":"Library","title":"Time steppers","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"Modules = [Oceananigans]\nPrivate = false\nPages   = [\"time_steppers.jl\"]","category":"page"},{"location":"library/#Utilities-1","page":"Library","title":"Utilities","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"Modules = [Oceananigans]\nPrivate = false\nPages   = [\"utils.jl\"]","category":"page"},{"location":"library/#Oceananigans.pretty_filesize","page":"Library","title":"Oceananigans.pretty_filesize","text":"pretty_filesize(s, suffix=\"B\")\n\nConvert a floating point value s representing a file size to a more human-friendly formatted string with one decimal places with a suffix defaulting to \"B\". Depending on the value of s the string will be formatted to show s using an SI prefix from bytes, kiB (1024 bytes), MiB (1024² bytes), and so on up to YiB (1024⁸ bytes).\n\n\n\n\n\n","category":"function"},{"location":"library/#Oceananigans.prettytime-Tuple{Any}","page":"Library","title":"Oceananigans.prettytime","text":"prettytime(t)\n\nConvert a floating point value t representing an amount of time in seconds to a more human-friendly formatted string with three decimal places. Depending on the value of t the string will be formatted to show t in nanoseconds (ns), microseconds (μs), milliseconds (ms), seconds (s), minutes (min), hours (hr), or days (day).\n\n\n\n\n\n","category":"method"},{"location":"library/#Oceananigans.update_Δt!-Tuple{Any,Any}","page":"Library","title":"Oceananigans.update_Δt!","text":"update_Δt!(wizard, model)\n\nCompute wizard.Δt given the velocities and diffusivities of model, and the parameters of wizard.\n\n\n\n\n\n","category":"method"},{"location":"verification/stratified_couette_flow/#Stratified-Couette-flow-1","page":"Stratified Couette flow","title":"Stratified Couette flow","text":"","category":"section"},{"location":"verification/stratified_couette_flow/#","page":"Stratified Couette flow","title":"Stratified Couette flow","text":"In regular plane Couette flow, a viscous fluid is situated between two infinite, parallel plates and usually the top plate moves at some constant velocity generating a linear velocity profile in steady state \\citep[\\S4.2–4.3]{Batchelor00}.","category":"page"},{"location":"verification/stratified_couette_flow/#","page":"Stratified Couette flow","title":"Stratified Couette flow","text":"In stratified Couette flow, the plates are additionally held at fixed temperatures to provide a stable stratification. It is a canonical geometry in which to investigate the dynamics of stratified shear flows as it exhibits a transition to turbulence, intermittent turbulence, coherent structures, and diapycnal mixing among other rich behavior \\citep{Zhou17}.","category":"page"},{"location":"verification/stratified_couette_flow/#","page":"Stratified Couette flow","title":"Stratified Couette flow","text":"In this test we follow \\citet{Vreugdenhil18} who use stratified Couette flow as a test of their large-eddy simulation model. We will compare our results to theirs and the direct numerical simulation results of \\citet{Deusebio15} and \\citet{Zhou17}.","category":"page"},{"location":"verification/stratified_couette_flow/#","page":"Stratified Couette flow","title":"Stratified Couette flow","text":"In our setup replicating that of \\citet{Vreugdenhil18}, a domain of size (L_x L_y L_z)h = (4pi 2pi 2) is bounded in the vertical z-direction by two infinite, parallel plates or walls at z = pm h with horizontal velocity u = pm U_w and constant temperature theta = pm Theta_w where theta denotes temperature in this section. The resulting flow is governed by the Reynolds, Richardson, and Prandtl numbers","category":"page"},{"location":"verification/stratified_couette_flow/#","page":"Stratified Couette flow","title":"Stratified Couette flow","text":"textRe = fracU_w hnu quad\ntextRi = fracalpha g Theta_w hU_w^2 quad\ntextPr = fracnukappa","category":"page"},{"location":"verification/stratified_couette_flow/#","page":"Stratified Couette flow","title":"Stratified Couette flow","text":"where nu is the kinematic viscosity, kappa is the thermal diffusivity, alpha is the thermal expansion coefficient, and g is the gravitational acceleration.","category":"page"},{"location":"verification/stratified_couette_flow/#","page":"Stratified Couette flow","title":"Stratified Couette flow","text":"Defining horizontal averages for velocity U = langle u rangle and Theta = langle theta rangle we can define the friction velocity u_tau and friction temperature theta_tau at the wall by","category":"page"},{"location":"verification/stratified_couette_flow/#","page":"Stratified Couette flow","title":"Stratified Couette flow","text":"u_tau^2 = fractau_wrho_0\n         = nu leftvert fracpartial Upartial z rightvert_z = pm h quad\ntheta_tau = fracq_wu_tau\n            = frackappau_tau leftvert fracpartialThetapartial z rightvert_z = pm h","category":"page"},{"location":"verification/stratified_couette_flow/#","page":"Stratified Couette flow","title":"Stratified Couette flow","text":"where tau_w is the wall stress and q_w = u_tau theta_tau is the wall heat flux.","category":"page"},{"location":"verification/stratified_couette_flow/#","page":"Stratified Couette flow","title":"Stratified Couette flow","text":"From here the friction Reynolds number and the Nusselt number can be defined","category":"page"},{"location":"verification/stratified_couette_flow/#","page":"Stratified Couette flow","title":"Stratified Couette flow","text":"textRe_tau = fracu_tau hnu quad textNu = fracq_w hkappa Theta_w","category":"page"},{"location":"verification/stratified_couette_flow/#","page":"Stratified Couette flow","title":"Stratified Couette flow","text":"which can be computed and compared.","category":"page"},{"location":"manual/time_stepping/#Time-stepping-and-the-fractional-step-method-1","page":"Time stepping","title":"Time-stepping and the fractional step method","text":"","category":"section"},{"location":"manual/time_stepping/#","page":"Time stepping","title":"Time stepping","text":"The time-integral of the momentum equation with the pressure decomposition from time step n at t = t_n  to time step n+1 at t_n+1 is","category":"page"},{"location":"manual/time_stepping/#","page":"Time stepping","title":"Time stepping","text":"    tageqmomentum-time-integral\n    bmu^n+1 - bmu^n = \n        int_t_n^t_n+1 Big  - bmnabla phi_rmnon \n                                    - bmnabla_ h phi_rmhyd \n                                    - left ( bmu bmcdot bmnabla right ) bmu \n                                    - bmf times bmu \n                                    + bmnabla bmcdot bmtau \n                                    + bmF_bmu Big   rmd t  ","category":"page"},{"location":"manual/time_stepping/#","page":"Time stepping","title":"Time stepping","text":"where the superscript n and n+1 imply evaluation at t_n and t_n+1,  such that bmu^n equiv bmu(t=t_n). The crux of the fractional step method is to treat the pressure term  bmnabla phi_rmnon implicitly using the approximation","category":"page"},{"location":"manual/time_stepping/#","page":"Time stepping","title":"Time stepping","text":"int_t_n^t_n+1 bmnabla phi_rmnon  rmd t approx \n    Delta t bmnabla phi_rmnon^n+1  ","category":"page"},{"location":"manual/time_stepping/#","page":"Time stepping","title":"Time stepping","text":"while treating the rest of the terms on the right hand side of \\eqref{eq:momentum-time-integral} explicitly. The implicit treatment of pressure ensures that the velocity field obtained at time step n+1 is divergence-free.","category":"page"},{"location":"manual/time_stepping/#","page":"Time stepping","title":"Time stepping","text":"To effect such a fractional step method, we define an intermediate velocity field bmu^star such that","category":"page"},{"location":"manual/time_stepping/#","page":"Time stepping","title":"Time stepping","text":"    tageqintermediate-velocity-field\n    bmu^star - bmu^n = int_t_n^t_n+1 bmG_bmu  rmd t  ","category":"page"},{"location":"manual/time_stepping/#","page":"Time stepping","title":"Time stepping","text":"where","category":"page"},{"location":"manual/time_stepping/#","page":"Time stepping","title":"Time stepping","text":"bmG_bmu equiv - bmnabla_h phi_rmhyd \n                       - left ( bmu bmcdot bmnabla right ) bmu \n                       - bmf times bmu \n                       + bmnabla bmcdot bmtau \n                       + bmF_bmu","category":"page"},{"location":"manual/time_stepping/#","page":"Time stepping","title":"Time stepping","text":"collects all terms on the right side of the time-integral of the momentum equation except the contribution  of non-hydrostatic pressure bmnabla phi_n. The integral on the right of the equation for bmu^star may be approximated by a variety of  explicit methods: for example, a forward Euler method uses","category":"page"},{"location":"manual/time_stepping/#","page":"Time stepping","title":"Time stepping","text":"    int_t_n^t_n+1 G  rmd t approx Delta t G^n  \n    tageqforward-euler","category":"page"},{"location":"manual/time_stepping/#","page":"Time stepping","title":"Time stepping","text":"for any time-dependent function G(t), while a second-order Adams-Bashforth method uses the approximation","category":"page"},{"location":"manual/time_stepping/#","page":"Time stepping","title":"Time stepping","text":"    tageqadams-bashforth\n    int_t_n^t_n+1 G  rmd t approx \n        Delta t left  left ( tfrac32 + chi right ) G^n \n        - left ( tfrac12 + chi right ) G^n-1 right   ","category":"page"},{"location":"manual/time_stepping/#","page":"Time stepping","title":"Time stepping","text":"where chi is a parameter. Ascher et al. (1995) claim that chi = tfrac18 is optimal;  chi=-tfrac12 yields the forward Euler scheme.","category":"page"},{"location":"manual/time_stepping/#","page":"Time stepping","title":"Time stepping","text":"Combining the equations for bmu^star and the time integral of the momnentum equation yields","category":"page"},{"location":"manual/time_stepping/#","page":"Time stepping","title":"Time stepping","text":"    tageqfractional-step\n    bmu^n+1 - bmu^star = - Delta t bmnabla phi_rmnon^n+1  rmd t  ","category":"page"},{"location":"manual/time_stepping/#","page":"Time stepping","title":"Time stepping","text":"Taking the divergence of fractional step equation and requiring that  bmnabla bmcdot bmu^n+1 = 0 yields a Poisson equation for the potential  phi_rmnon at time-step n+1:","category":"page"},{"location":"manual/time_stepping/#","page":"Time stepping","title":"Time stepping","text":"    bmnabla^2 phi_rmnon^n+1 = fracbmnabla bmcdot bmu^starDelta t  ","category":"page"},{"location":"manual/time_stepping/#","page":"Time stepping","title":"Time stepping","text":"With bmu^star and phi_rmnon, bmu^n+1 is then computed via the fractional step equation.","category":"page"},{"location":"manual/time_stepping/#","page":"Time stepping","title":"Time stepping","text":"Tracers are stepped forward explicitly via","category":"page"},{"location":"manual/time_stepping/#","page":"Time stepping","title":"Time stepping","text":"    tageqtracer-timestep\n    c^n+1 - c^n = int_t_n^t_n+1 G_c  rmd t  ","category":"page"},{"location":"manual/time_stepping/#","page":"Time stepping","title":"Time stepping","text":"where ","category":"page"},{"location":"manual/time_stepping/#","page":"Time stepping","title":"Time stepping","text":"    G_c equiv - bmnabla bmcdot left ( bmu c right ) - bmnabla bmcdot bmq_c + F_c  ","category":"page"},{"location":"manual/time_stepping/#","page":"Time stepping","title":"Time stepping","text":"and the same forward Euler or Adams-Bashforth scheme as for the explicit evaluation of the time-integral of bmG_u is used to evaluate the integral of G_c.","category":"page"},{"location":"manual/finite_volume/#Finite-volume-method-on-a-staggered-grid-1","page":"Finite volume method","title":"Finite volume method on a staggered grid","text":"","category":"section"},{"location":"manual/finite_volume/#","page":"Finite volume method","title":"Finite volume method","text":"The Oceananigans.jl staggered grid is defined by a Cartesian array of cuboids of horizontal dimensions  Delta x_i j k Delta y_i j k and vertical dimension  Delta z_i j k, where (i j k) index the location of each cell in the staggered grid. Note that the indices (i j k) increase with increasing coordinate (x y z).","category":"page"},{"location":"manual/finite_volume/#","page":"Finite volume method","title":"Finite volume method","text":"(Image: Schematic of staggered grid) A schematic of \\texttt{Oceananigans.jl} finite volumes for a two-dimensional staggered grid in (x z). Tracers c and pressure p are defined at the center of the control volume. The u control volumes are  centered on the left and right edges of the pressure control volume while the w control volumes are centered  on the top and bottom edges of the pressure control volumes. The indexing convention places the i^rmth  u-node on cell x-faces to the left of the i tracer point at cell centers.","category":"page"},{"location":"manual/finite_volume/#","page":"Finite volume method","title":"Finite volume method","text":"Dropping explicit indexing, the areas of cell faces are given by","category":"page"},{"location":"manual/finite_volume/#","page":"Finite volume method","title":"Finite volume method","text":"    A_x = Delta y Delta z quad A_y = Delta x Delta z quad A_z = Delta x Delta y","category":"page"},{"location":"manual/finite_volume/#","page":"Finite volume method","title":"Finite volume method","text":"so that each cell encloses a volume V = Delta x Delta y Delta z.","category":"page"},{"location":"manual/finite_volume/#","page":"Finite volume method","title":"Finite volume method","text":"A finite volume method discretizes a continuous quantity c by considering its average over a finite volume:","category":"page"},{"location":"manual/finite_volume/#","page":"Finite volume method","title":"Finite volume method","text":"    c_i j k equiv frac1V_i j k int c(bmx)  rmd V_i j k  ","category":"page"},{"location":"manual/finite_volume/#","page":"Finite volume method","title":"Finite volume method","text":"The finite volumes that discretize each of u, v, and w are located on a grid which is \"staggered\"  with respect to the grid that defines tracer finite volumes.  The nodes, or central points of the velocity finite volumes are co-located with the faces of the tracer  finite volume. In particular, the u-nodes are located in the center of the \"x-face\" (east of the tracer point),  v-nodes are located on y-faces south of the tracer point, and w-nodes are located on  z-faces downwards from the tracer point.","category":"page"},{"location":"generated/ocean_convection_with_plankton/#","page":"Ocean convection with plankton","title":"Ocean convection with plankton","text":"EditURL = \"https://github.com/climate-machine/Oceananigans.jl/blob/master/examples/ocean_convection_with_plankton.jl\"","category":"page"},{"location":"generated/ocean_convection_with_plankton/#Ocean-convection-example-1","page":"Ocean convection with plankton","title":"Ocean convection example","text":"","category":"section"},{"location":"generated/ocean_convection_with_plankton/#","page":"Ocean convection with plankton","title":"Ocean convection with plankton","text":"In this example, two-dimensional convection into a stratified fluid mixes a phytoplankton-like tracer. This example demonstrates how","category":"page"},{"location":"generated/ocean_convection_with_plankton/#","page":"Ocean convection with plankton","title":"Ocean convection with plankton","text":"to set boundary conditions;\nto defined and insert a user-defined forcing function into a simulation.\nto use the TimeStepWizard to manage and adapt the simulation time-step.","category":"page"},{"location":"generated/ocean_convection_with_plankton/#","page":"Ocean convection with plankton","title":"Ocean convection with plankton","text":"To begin, we load Oceananigans, a plotting package, and a few miscellaneous useful packages.","category":"page"},{"location":"generated/ocean_convection_with_plankton/#","page":"Ocean convection with plankton","title":"Ocean convection with plankton","text":"using Oceananigans, PyPlot, Random, Printf","category":"page"},{"location":"generated/ocean_convection_with_plankton/#Parameters-1","page":"Ocean convection with plankton","title":"Parameters","text":"","category":"section"},{"location":"generated/ocean_convection_with_plankton/#","page":"Ocean convection with plankton","title":"Ocean convection with plankton","text":"We choose a modest two-dimensional resolution of 128² in a 64² m² domain , implying a resolution of 0.5 m. Our fluid is initially stratified with a squared buoyancy frequency","category":"page"},{"location":"generated/ocean_convection_with_plankton/#","page":"Ocean convection with plankton","title":"Ocean convection with plankton","text":"$ N² = 10⁻⁵ \\rm{s⁻²} $","category":"page"},{"location":"generated/ocean_convection_with_plankton/#","page":"Ocean convection with plankton","title":"Ocean convection with plankton","text":"and a surface buoyancy flux","category":"page"},{"location":"generated/ocean_convection_with_plankton/#","page":"Ocean convection with plankton","title":"Ocean convection with plankton","text":"$ Q_b = 10⁻⁸ \\rm{m³ s⁻²} $","category":"page"},{"location":"generated/ocean_convection_with_plankton/#","page":"Ocean convection with plankton","title":"Ocean convection with plankton","text":"Because we use the physics-based convection whereby buoyancy flux by a positive vertical velocity implies positive flux, a positive buoyancy flux at the top of the domain carries buoyancy out of the fluid and causes convection. Finally, we end the simulation after 1 day.","category":"page"},{"location":"generated/ocean_convection_with_plankton/#","page":"Ocean convection with plankton","title":"Ocean convection with plankton","text":"Nz = 128\nLz = 64.0\nN² = 1e-5\nQb = 1e-8\nend_time = day / 2","category":"page"},{"location":"generated/ocean_convection_with_plankton/#Creating-boundary-conditions-1","page":"Ocean convection with plankton","title":"Creating boundary conditions","text":"","category":"section"},{"location":"generated/ocean_convection_with_plankton/#","page":"Ocean convection with plankton","title":"Ocean convection with plankton","text":"Create boundary conditions. Note that temperature is buoyancy in our problem.","category":"page"},{"location":"generated/ocean_convection_with_plankton/#","page":"Ocean convection with plankton","title":"Ocean convection with plankton","text":"buoyancy_bcs = HorizontallyPeriodicBCs(   top = BoundaryCondition(Flux, Qb),\n                                       bottom = BoundaryCondition(Gradient, N²))","category":"page"},{"location":"generated/ocean_convection_with_plankton/#Define-a-forcing-function-1","page":"Ocean convection with plankton","title":"Define a forcing function","text":"","category":"section"},{"location":"generated/ocean_convection_with_plankton/#","page":"Ocean convection with plankton","title":"Ocean convection with plankton","text":"Our forcing function roughly corresponds to the growth of phytoplankton in light (with a penetration depth of 16 meters here), and death due to natural mortality at a rate of 1 phytoplankton unit per second.","category":"page"},{"location":"generated/ocean_convection_with_plankton/#","page":"Ocean convection with plankton","title":"Ocean convection with plankton","text":"growth_and_decay = SimpleForcing((x, y, z, t) -> exp(z/16) - 1)\n\n# Instantiate the model\nmodel = Model(\n                   grid = RegularCartesianGrid(size = (Nz, 1, Nz), length = (Lz, Lz, Lz)),\n                closure = ConstantIsotropicDiffusivity(ν=1e-4, κ=1e-4),\n               coriolis = FPlane(f=1e-4),\n                tracers = (:b, :plankton),\n               buoyancy = BuoyancyTracer(),\n                forcing = ModelForcing(plankton=growth_and_decay),\n    boundary_conditions = BoundaryConditions(b=buoyancy_bcs)\n)","category":"page"},{"location":"generated/ocean_convection_with_plankton/#","page":"Ocean convection with plankton","title":"Ocean convection with plankton","text":"Set makeplot = true to live-update a plot of vertical velocity, temperature, and salinity as the simulation runs.","category":"page"},{"location":"generated/ocean_convection_with_plankton/#","page":"Ocean convection with plankton","title":"Ocean convection with plankton","text":"makeplot = false\n\n# Set initial condition. Initial velocity and salinity fluctuations needed for AMD.\nΞ(z) = randn() * z / Lz * (1 + z / Lz) # noise\nb₀(x, y, z) = N² * z + N² * Lz * 1e-6 * Ξ(z)\nset!(model, b=b₀)\n\n# A wizard for managing the simulation time-step.\nwizard = TimeStepWizard(cfl=0.1, Δt=1.0, max_change=1.1, max_Δt=90.0)\n\n# Create a plot\nfig, axs = subplots(ncols=2, figsize=(10, 6))\n\n\"\"\"\n    makeplot!(axs, model)\n\nMake side-by-side x-z slices of vertical velocity and plankton associated with `model` in `axs`.\n\"\"\"\nfunction makeplot!(axs, model)\n    xC = repeat(model.grid.xC, 1, model.grid.Nz)\n    zF = repeat(reshape(model.grid.zF[1:end-1], 1, model.grid.Nz), model.grid.Nx, 1)\n    zC = repeat(reshape(model.grid.zC, 1, model.grid.Nz), model.grid.Nx, 1)\n\n    sca(axs[1]); cla()\n    # Calling the Array() constructor here allows plots to be made for GPU models:\n    pcolormesh(xC, zF, Array(interior(model.velocities.w))[:, 1, :])\n    title(\"Vertical velocity\")\n    xlabel(\"\\$ x \\$ (m)\")\n    ylabel(\"\\$ z \\$ (m)\")\n\n    sca(axs[2]); cla()\n    # Calling the Array() constructor here allows plots to be made for GPU models:\n    pcolormesh(xC, zC, Array(interior(model.tracers.plankton))[:, 1, :])\n    title(\"Phytoplankton concentration\")\n    xlabel(\"\\$ x \\$ (m)\")\n    axs[2].tick_params(left=false, labelleft=false)\n\n    suptitle(@sprintf(\"\\$ t = %.2f\\$ hours\", model.clock.time / hour))\n    [ax.set_aspect(1) for ax in axs]\n    pause(0.01)\n    gcf()\n    return nothing\nend","category":"page"},{"location":"generated/ocean_convection_with_plankton/#","page":"Ocean convection with plankton","title":"Ocean convection with plankton","text":"Run the model:","category":"page"},{"location":"generated/ocean_convection_with_plankton/#","page":"Ocean convection with plankton","title":"Ocean convection with plankton","text":"while model.clock.time < end_time\n    update_Δt!(wizard, model)\n    walltime = @elapsed time_step!(model, 100, wizard.Δt)\n\n    # Print a progress message\n    @printf(\"progress: %.1f %%, i: %04d, t: %s, Δt: %s, wall time: %s\\n\",\n            model.clock.time / end_time * 100, model.clock.iteration,\n            prettytime(model.clock.time), prettytime(wizard.Δt), prettytime(walltime))\n\n    makeplot && makeplot!(axs, model)\nend","category":"page"},{"location":"generated/ocean_convection_with_plankton/#","page":"Ocean convection with plankton","title":"Ocean convection with plankton","text":"Plot the result at the end","category":"page"},{"location":"generated/ocean_convection_with_plankton/#","page":"Ocean convection with plankton","title":"Ocean convection with plankton","text":"makeplot!(axs, model)\ngcf()","category":"page"},{"location":"generated/ocean_convection_with_plankton/#","page":"Ocean convection with plankton","title":"Ocean convection with plankton","text":"This page was generated using Literate.jl.","category":"page"},{"location":"manual/physics/#Navier-Stokes-and-tracer-conservation-equations-1","page":"Physics","title":"Navier-Stokes and tracer conservation equations","text":"","category":"section"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"Oceananigans.jl solves the incompressible Navier-Stokes equations and an arbitrary  number of tracer conservation equations.  Physics associated with individual terms in the momentum and tracer conservation  equations –- the background rotation rate of the equation's reference frame,  gravitational effects associated with buoyant tracers under the Boussinesq  approximation[1], generalized stresses and tracer fluxes associated with viscous and  diffusive physics, and arbitrary \"forcing functions\" –- are determined by the whims of the  user.","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"[1]: Named after Boussinesq (1903) although used earlier by Oberbeck (1879), the Boussinesq   approximation neglects density differences in the momentum equation except when associated    with the gravitational term. It is an accurate approximation for many flows, and especially    so for oceanic flows where density differences are very small. See Vallis (2017, section 2.4)    for an oceanographic introduction to the Boussinesq equations and Vallis (2017, Section 2.A)    for an asymptotic derivation. See Kundu (2015, Section 4.9) for an engineering    introduction.","category":"page"},{"location":"manual/physics/#Coordinate-system-and-notation-1","page":"Physics","title":"Coordinate system and notation","text":"","category":"section"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"Oceananigans.jl is formulated in a Cartesian coordinate system  bmx = (x y z) with unit vectors bmhat x, bmhat y, and bmhat z,  where bmhat x points east, bmhat y points north, and bmhat z points 'upward',  opposite the direction of gravitational acceleration.  We denote time with t, partial derivatives with respect to time t or a coordinate x  with partial_t or partial_x, and denote the gradient operator  bmnabla equiv partial_x bmhat x + partial_y bmhat y + partial_z bmhat z. We use u, v, and w to denote the east, north, and vertical velocity components,  such that bmu = u bmhat x + v bmhat y + w bmhat z.","category":"page"},{"location":"manual/physics/#The-Boussinesq-approximation-1","page":"Physics","title":"The Boussinesq approximation","text":"","category":"section"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"In Oceananigans.jl the fluid density rho is, in general, decomposed into three  components: ","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"    rho(bmx t) = rho_0 + rho_*(z) + rho(bmx t)  ","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"where rho_0 is a constant 'reference' density, rho_*(z) is a background density  profile typically associated with the hydrostatic compression of seawater in the deep ocean,  and rho(bmx t) is the dynamic component of density corresponding to inhomogeneous  distributions of a buoyant tracer such as temperature or salinity. The fluid buoyancy, associated with the buoyant acceleration of fluid, is  defined in terms of rho as","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"    b = - fracg rhorho_0  ","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"where g is gravitational acceleration.","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"The Boussinesq approximation is valid when rho_* + rho ll rho_0, which implies the  fluid is approximately incompressible[2] In this case, the mass conservation equation reduces to the continuity equation","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"    bmnabla bmcdot bmu = partial_x u + partial_y v + partial_z w = 0  \n    tageqcontinuity","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"[2]: Incompressible fluids do not support acoustic waves.","category":"page"},{"location":"manual/physics/#The-momentum-conservation-equation-1","page":"Physics","title":"The momentum conservation equation","text":"","category":"section"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"The equations governing the conservation of momentum in a rotating fluid, including buoyancy via the Boussinesq approximation and including the averaged effects of surface gravity waves at the top of the domain via the Craik-Leibovich approximation are","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"    partial_t bmu + left ( bmu bmcdot bmnabla right ) bmu \n        + left ( bmf - bmnabla times bmu^S right ) times bmu = - bmnabla phi + b bmhat z \n        - bmnabla bmcdot bmtau - partial_t bmu^S + bmF_u  \n    tageqmomentum","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"where b is buoyancy, bmtau is the kinematic stress tensor, bmF_u denotes an internal forcing of the velocity field bmu, phi is the potential  associated with kinematic and constant hydrostatic contributions to pressure,  bmu^S is the 'Stokes drift' velocity field associated with surface gravity waves, and bmf is Coriolis parameter, or the background vorticity associated with the  specified rate of rotation of the frame of reference.","category":"page"},{"location":"manual/physics/#The-tracer-conservation-equation-1","page":"Physics","title":"The tracer conservation equation","text":"","category":"section"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"The conservation law for tracers in Oceananigans.jl is","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"    partial_t c + bmu bmcdot bmnabla c = - bmnabla bmcdot bmq_c + F_c  \n    tageqtracer","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"where bmq_c is the diffusive flux of c and F_c is an arbitrary source term. Oceananigans.jl permits arbitrary tracers and thus an arbitrary number of tracer  equations to be solved simultaneously with the momentum equations.","category":"page"},{"location":"manual/physics/#Buoyancy-model-and-equations-of-state-1","page":"Physics","title":"Buoyancy model and equations of state","text":"","category":"section"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"The buoyancy model determines the relationship between tracers and the buoyancy b in the momentum equation.","category":"page"},{"location":"manual/physics/#Buoyancy-tracer-1","page":"Physics","title":"Buoyancy tracer","text":"","category":"section"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"The simplest buoyancy model uses buoyancy b itself as a tracer: b obeys the tracer conservation equation and is used directly in the momentum equations in the momentum equation.","category":"page"},{"location":"manual/physics/#Seawater-buoyancy-1","page":"Physics","title":"Seawater buoyancy","text":"","category":"section"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"For seawater buoyancy is, in general, modeled as a function of conservative temperature  theta, absolute salinity S, and depth below the ocean surface d via","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"    b = - fracgrho_0 rho left (theta S d right )  \n    tageqseawater-buoyancy","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"where g is gravitational acceleration, rho_0 is the reference density. The function rho(theta S d) in the seawater buoyancy relationship that links conservative temperature,  salinity, and depth to the density perturbation is called the equation of state. Both theta and S obey the tracer conservation equation.","category":"page"},{"location":"manual/physics/#Linear-equation-of-state-1","page":"Physics","title":"Linear equation of state","text":"","category":"section"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"Buoyancy is determined from a linear equation of state via","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"    b = g left ( alpha_theta theta - beta_S S right )  ","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"where g is gravitational acceleration, alpha_theta is the thermal expansion coefficient,  and beta_S is the haline contraction coefficient.","category":"page"},{"location":"manual/physics/#Nonlinear-equation-of-state-1","page":"Physics","title":"Nonlinear equation of state","text":"","category":"section"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"Buoyancy is determined by the simplified equations of state introduced by Roquet et al (2015).","category":"page"},{"location":"manual/physics/#Coriolis-forces-1","page":"Physics","title":"Coriolis forces","text":"","category":"section"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"The Coriolis model controls the manifestation of the term bmf times bmu in the momentum equation.","category":"page"},{"location":"manual/physics/#The-\"f-plane\"-approximation-1","page":"Physics","title":"The \"f-plane\" approximation","text":"","category":"section"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"Under an f-plane approximation[3] the reference frame in which  the momentum and tracer equations are are solved rotates at a constant rate around a  vertical axis, such that ","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"    bmf = f bmhat z","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"where f is constant and determined by the user. ","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"[3]: The f-plane approximation is used to model the effects of Earth's rotation on    anisotropic fluid motion in a plane tangent to the Earth's surface. In this case, bmf is    math       \\bm{f} \\approx \\frac{4 \\pi}{\\text{day}} \\sin \\varphi \\bm{\\hat z} \\, , $   where phi is latitude and the Earth's rotation rate is approximately 2 pi  textday.   This approximation neglects the vertical component of Earth's rotation vector at varphi.","category":"page"},{"location":"manual/physics/#The-\\beta-plane-approximation-1","page":"Physics","title":"The beta-plane approximation","text":"","category":"section"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"Under the beta-plane approximation, the rotation axis is vertical as for the  f-plane approximation, but f is expanded in a Taylor series around a central latitude such that ","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"    bmf = left ( f_0 + beta y right ) bmhat z  ","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"where f_0 is the planetary vorticity at some central latitude, and beta is the  planetary vorticity gradient. The beta-plane model is not periodic in y and thus can be used only in domains that  are bounded in the y-direction.","category":"page"},{"location":"manual/physics/#Turbulence-closures-1","page":"Physics","title":"Turbulence closures","text":"","category":"section"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"The turbulence closure selected by the user determines the form of stress divergence  bmnabla bmcdot bmtau and diffusive flux divergence  bmnabla bmcdot bmq_c in the momentum and tracer conservation equations.","category":"page"},{"location":"manual/physics/#Constant-isotropic-diffusivity-1","page":"Physics","title":"Constant isotropic diffusivity","text":"","category":"section"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"In a constant isotropic diffusivity model, the kinematic stress tensor is defned","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"tau_ij = - nu Sigma_ij  ","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"where nu is a constant viscosity and  Sigma_ij equiv tfrac12 left ( u_i j + u_j i right ) is the strain-rate  tensor. The divergence of bmtau is then","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"bmnabla bmcdot bmtau = -nu bmnabla^2 bmu  ","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"Similarly, the diffusive tracer flux is bmq_c = - kappa bmnabla c for tracer  diffusivity kappa, and the diffusive tracer flux divergence is","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"bmnabla bmcdot bmq_c = - kappa bmnabla^2 c  ","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"Each tracer may have a unique diffusivity kappa.","category":"page"},{"location":"manual/physics/#Constant-anisotropic-diffusivity-1","page":"Physics","title":"Constant anisotropic diffusivity","text":"","category":"section"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"In Oceananigans.jl, a constant anisotropic diffusivity implies a constant tensor  diffusivity nu_j k and stress bmtau_ij = nu_j k u_i k with non-zero  components nu_11 = nu_22 = nu_h and nu_33 = nu_v. With this form the kinematic stress divergence becomes","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"bmnabla bmcdot bmtau = - left  nu_h left ( partial_x^2 + partial_y^2 right ) \n                                    + nu_v partial_z^2 right  bmu  ","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"and diffusive flux divergence","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"bmnabla bmcdot bmq_c = - left  kappa_h left ( partial_x^2 + partial_y^2 right ) \n                                    + kappa_v partial_z^2 right  c  ","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"in terms of the horizontal viscosities and diffusivities nu_h and kappa_h and the  vertical viscosity and diffusivities nu_v and kappa_v. Each tracer may have a unique diffusivity components kappa_h and kappa_v.","category":"page"},{"location":"manual/physics/#Constant-anisotropic-biharmonic-diffusivity-1","page":"Physics","title":"Constant anisotropic biharmonic diffusivity","text":"","category":"section"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"In Oceananigans.jl, a constant anisotropic biharmonic diffusivity implies a constant tensor  diffusivity nu_j k and stress bmtau_ij = nu_j k partial_k^3 u_i with non-zero  components nu_11 = nu_22 = nu_h and nu_33 = nu_v. With this form the kinematic stress divergence becomes","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"bmnabla bmcdot bmtau = - left  nu_h left ( partial_x^2 + partial_y^2 right )^2 \n                                    + nu_v partial_z^4 right  bmu  ","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"and diffusive flux divergence","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"bmnabla bmcdot bmq_c = - left  kappa_h left ( partial_x^2 + partial_y^2 right )^2 \n                                    + kappa_v partial_z^4 right  c  ","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"in terms of the horizontal biharmonic viscosities and diffusivities nu_h and kappa_h and the  vertical biharmonic viscosity and diffusivities nu_v and kappa_v. Each tracer may have a unique diffusivity components kappa_h and kappa_v.","category":"page"},{"location":"manual/physics/#Smagorinsky-Lilly-turbulence-closure-1","page":"Physics","title":"Smagorinsky-Lilly turbulence closure","text":"","category":"section"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"In the turbulence closure proposed by Lilly (1962) and Smagorinsky (1963),  the subgrid stress associated with unresolved turbulent motions is modeled diffusively via","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"tau_ij = nu_e Sigma_ij  ","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"where Sigma_ij = tfrac12 left ( u_i j + u_j i right ) is the resolved  strain rate.  The eddy viscosity is given by","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"    nu_e = left ( C Delta_f right )^2 sqrt Sigma^2   Upsilon(Ri) + nu  \n    tageqsmagorinsky-viscosity","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"where Delta_f is the \"filter width\" associated with the finite volume grid spacing,  C is a user-specified model constant, Sigma^2 equiv Sigma_ij Sigmaij, and  nu is a constant isotropic background viscosity. The factor Upsilon(Ri) reduces nu_e in regions of  strong stratification where the resolved gradient Richardson number  Ri equiv N^2  Sigma^2 is large via","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"    Upsilon(Ri) = sqrt1 - min left ( 1 C_b N^2  Sigma^2 right )  ","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"where N^2 = max left (0 partial_z b right ) is the squared buoyancy frequency for stable stratification with partial_z b  0 and C_b is a user-specified constant. Roughly speaking, the filter width for the Smagorinsky-Lilly closure is taken as","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"Delta_f(bmx) = left ( Delta x Delta y Delta z right)^13  ","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"where Delta x, Delta y, and Delta z are the grid spacing in the  bmhat x, bmhat y, and bmhat z directions at location bmx = (x y z).","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"The effect of subgrid turbulence on tracer mixing is also modeled diffusively via","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"bmq_c = kappa_e bmnabla c  ","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"where the eddy diffusivity kappa_e is","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"kappa_e = fracnu_e - nuPr + kappa  ","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"where Pr is a turbulent Prandtl number and kappa is a constant isotropic background diffusivity. Both Pr and kappa may be set independently for each tracer.","category":"page"},{"location":"manual/physics/#Anisotropic-minimum-dissipation-(AMD)-turbulence-closure-1","page":"Physics","title":"Anisotropic minimum dissipation (AMD) turbulence closure","text":"","category":"section"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"Oceananigans.jl uses the anisotropic minimum dissipation (AMD) model proposed by  Verstappen18 and described and tested by Vreugdenhil18.  The AMD model uses an eddy diffusivity hypothesis similar the Smagorinsky-Lilly model. In the AMD model, the eddy viscosity and diffusivity for each tracer are defined in terms  of eddy viscosity and diffusivity \\emph{predictors} nu_e^dagger and kappa_e^dagger, such that","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"    nu_e = max left ( 0 nu_e^dagger right ) + nu\n    quad textand quad\n    kappa_e = max left ( 0 kappa_e^dagger right ) + kappa","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"to ensure that nu_e ge 0 and kappa_e ge 0, where nu and kappa are the  constant isotropic background viscosity and diffusivities for each tracer. The eddy viscosity predictor is","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"    tageqnu-dagger\n    nu_e^dagger = -(C Delta_f)^2\n    frac\n        left( hatpartial_k hatu_i right) left( hatpartial_k hatu_j right) hatSigma_ij\n        + C_b hatdelta_i3 left( hatpartial_k hatu_i right) hatpartial_k b\n        left( hatpartial_l hatu_m right) left( hatpartial_l hatu_m right)","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"while the eddy diffusivity predictor for tracer c is","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"    tageqkappa-dagger\n    kappa_e^dagger = -(C Delta_f)^2\n    frac\n        left( hatpartial_k hatu_i right) left( hatpartial_k c right) hatpartial_i c\n        left( hatpartial_l c right) left( hatpartial_l c right)  ","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"In the definitions of the eddy viscosity and eddy diffusivity predictor, C and C_b are  user-specified model constants, Delta_f is a \"filter width\" associated with the finite volume  grid spacing, and the hat decorators on partial derivatives, velocities, and the Kronecker  delta hat delta_i3 are defined such that","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"    hat partial_i equiv Delta_i partial_i qquad\n    hatu_i(x t) equiv fracu_i(x t)Delta_i quad textand quad\n    hatdelta_i3 equiv fracdelta_i3Delta_3  ","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"A velocity gradient, for example, is therefore  hatpartial_i hatu_j(x t) = fracDelta_iDelta_j partial_i u_j(x t),  while the normalized strain tensor is","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"    hatSigma_ij =\n        frac12 left hatpartial_i hatu_j(x t) + hatpartial_j hatu_i(x t) right  ","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"The filter width Delta_f in that appears in the viscosity and diffusivity predictors is taken as the square root of the harmonic mean of the squares of the filter widths in  each direction:","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"    frac1Delta_f^2 = frac13 left(   frac1Delta x^2 \n                                              + frac1Delta y^2 \n                                              + frac1Delta z^2 right)  ","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"The constant C_b permits the \"buoyancy modification\" term it multiplies to be omitted  from a calculation. By default we use the model constants C=112 and C_b=0.","category":"page"},{"location":"manual/physics/#Surface-gravity-waves-and-the-Craik-Leibovich-approximation-1","page":"Physics","title":"Surface gravity waves and the Craik-Leibovich approximation","text":"","category":"section"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"In Oceananiagns.jl, users model the effects of surface waves by specifying spatial and temporal gradients of the Stokes drift velocity field. At the moment, only uniform unidirectional Stokes drift fields are supported, in which case","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"    bmu^S = u^S(z t) hatbmx + v^S(z t) hatbmy  ","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"Surface waves are modeled in Oceananigans.jl by the Craik-Leibovich approximation, which governs interior motions under a surface gravity wave field that have been time- or phase-averaged over the rapid oscillations of the surface waves. The oscillatory vertical and horizontal motions associated with surface waves themselves, therefore, are not present in the resolved velocity field bmu, and only the steady,  averaged effect of surface waves that manifests over several or more wave oscillations are modeled.","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"In Oceananigans.jl with surface waves, the resolved velocity field bmu is the Lagrangian-mean  velocity field. The Lagrangian-mean velocity field at a particular location (x y z) is average velocity of a  fluid particle whose average position is (x y z) at time t. The average position of a fluid particle bmxi(t) = (xi eta zeta) is thus governed by","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"    partial_t bmxi + bmu(bmxi t) bmcdot bmnabla bmxi = bmu(bmxi t)  ","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"which is the same relationship that holds when surface waves are not present and bmu ceases to be an averaged velocity field. The simplicity of the governing equations for Lagrangian-mean momentum is the main reason we use a Lagrangian-mean formulation in Oceananigans.jl, rather than an Eulerian-mean formulation:  for example, the tracer conservation equation is unchanged by the inclusion of surface wave effects. Moreover, because the effect of surface waves manifests either as a bulk forcing of  Lagrangian-mean momentum or as a modification to the effective background rotation rate of  the interior fluid similar to any bulk forcing or Coriolis force, we do not explicitly include the  effects of surface waves in turbulence closures that model the effects of subgrid turbulence. More specifically, the effect of steady surface waves does not effect the conservation of  Lagrangian-mean turbulent kinetic energy.","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"The Lagrangian-mean velocity field bmu contrasts with the Eulerian-mean velocity field bmu^E,  which is the fluid velocity averaged at the fixed Eulerian position (x y z). The surface wave Stokes drift field supplied by the user is, in fact, defined by the difference between the Eulerian- and Lagrangian-mean velocity:","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"    bmu^S equiv bmu - bmu^E  ","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"The Stokes drift velocity field is typically prescribed for idealized scenarios, or determined from a wave model for the evolution of surface waves under time-dependent atmospheric winds in more realistic cases.","category":"page"},{"location":"manual/physics/#Boundary-conditions-1","page":"Physics","title":"Boundary conditions","text":"","category":"section"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"In Oceananigans.jl the user may impose \\textit{no-penetration}, \\textit{flux},  \\textit{gradient} (Neumann), and \\textit{value} (Dirichlet) boundary conditions in bounded,  non-periodic directions. Note that the only boundary condition available for a velocity field normal to the bounded  direction is \\textit{no-penetration}.","category":"page"},{"location":"manual/physics/#Flux-boundary-conditions-1","page":"Physics","title":"Flux boundary conditions","text":"","category":"section"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"A flux boundary condition prescribes flux of a quantity normal to the boundary.  For a tracer c this corresponds to prescribing ","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"q_c  _b equiv bmq_c bmcdot hatbmn  _partial Omega_b   ","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"where partial Omega_b is an external boundary.","category":"page"},{"location":"manual/physics/#Gradient-(Neumann)-boundary-condition-1","page":"Physics","title":"Gradient (Neumann) boundary condition","text":"","category":"section"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"A gradient boundary condition prescribes the gradient of a field normal to the boundary.  For a tracer c this prescribes ","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"gamma equiv bmnabla c bmcdot hatbmn  _partial Omega_b  ","category":"page"},{"location":"manual/physics/#Value-(Dirichlet)-boundary-condition-1","page":"Physics","title":"Value (Dirichlet) boundary condition","text":"","category":"section"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"A value boundary condition prescribes the value of a field on a boundary; for a tracer this  prescribes ","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"c_b equiv c  _partial Omega_b  ","category":"page"},{"location":"manual/physics/#No-penetration-boundary-condition-1","page":"Physics","title":"No penetration boundary condition","text":"","category":"section"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"A no penetration boundary condition prescribes the velocity component normal to a boundary to be 0, so that","category":"page"},{"location":"manual/physics/#","page":"Physics","title":"Physics","text":"bmhatn bmcdot bmu  _partial Omega_b = 0  ","category":"page"},{"location":"manual/poisson_solvers/#Poisson-solvers-1","page":"Poisson solvers","title":"Poisson solvers","text":"","category":"section"},{"location":"manual/poisson_solvers/#The-elliptic-problem-for-the-pressure-1","page":"Poisson solvers","title":"The elliptic problem for the pressure","text":"","category":"section"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"The pressure field is obtained by taking the divergence of the horizontal component of the momentum equation \\eqref{eq:momentumStar} and invoking the vertical component to yield an elliptic Poisson equation for the non-hydrostatic kinematic pressure","category":"page"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"nabla^2phi_NH = fracnabla cdot bmu^nDelta t + nabla cdot bmG_bmu equiv mathscrF","category":"page"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"along with homogenous Neumann boundary conditions bmu cdot bmhatn = 0 (Neumann on phi for wall-bounded directions and periodic otherwise) and where mathscrF denotes the source term for the Poisson equation.","category":"page"},{"location":"manual/poisson_solvers/#Direct-method-1","page":"Poisson solvers","title":"Direct method","text":"","category":"section"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"Discretizing elliptic problems that can be solved via a classical separation-of-variables approach, such as Poisson's equation, results in a linear system of equations Mbmx = bmy where M is a real symmetric matrix of block tridiagonal form. This allows for the matrix to be decomposed and solved efficiently, provided that the eigenvalues and eigenvectors of the blocks are known \\citep[\\S2]{Buzbee70}. In the case of Poisson's equation on a rectangle, \\citet{Hockney65} has taken advantage of the fact that the fast Fourier transform can be used to perform the matrix multiplication steps resulting in an even more efficient method. \\citet{Schumann88} describe the implementation of such an algorithm for Poisson's equation on a staggered grid with Dirchlet, Neumann, and periodic boundary conditions.","category":"page"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"The method can be explained easily by taking the Fourier transform of both sides of \\eqref{eq:poisson-pressure} to yield","category":"page"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"-(k_x^2 + k_y^2 + k_z^2) widehatphi_NH = widehatmathscrF\nquad implies quad\nwidehatphi_NH = - fracwidehatmathscrFk_x^2 + k_y^2 + k_z^2","category":"page"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"where widehatcdot denotes the Fourier component. Here k_x, k_y, and k_z are the wavenumbers. However, when solving the equation on a staggered grid we require a solution for phi_NH that is second-order accurate such that when when its Laplacian is computed, nabla^2phi_NH matches mathscrF to machine precision. This is crucial to ensure that the projection step in \\S\\ref{sec:fractional-step} works. To do this, the wavenumbers are replaced by eigenvalues lambda_x, lambda_y, and lambda_z satisfying the discrete form of Poisson's equation with appropriate boundary conditions. Thus, Poisson's equation's is diagonalized in Fourier space and the Fourier coefficients of the solution are easily solved for","category":"page"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"widehatphi_NH(i j k) = - fracwidehatmathscrF(i j k)lambda^x_i + lambda^y_j + lambda^z_k","category":"page"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"The eigenvalues are given by \\citet{Schumann88} and can also be tediously derived by plugging in the definition of the discrete Fourier transform into \\eqref{eq:poisson-spectral}","category":"page"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"beginaligned\n    lambda^x_i = 4fracN_x^2L_x^2 sin^2 left  frac(i-1)piN_x  right  quad i=01 dotsN_x-1 \n    lambda^x_j = 4fracN_y^2L_y^2 sin^2 left  frac(j-1)piN_y  right  quad j=01 dotsN_y-1 \n    lambda^x_k = 4fracN_z^2L_z^2 sin^2 left  frac(k-1)pi2N_z right  quad k=01 dotsN_z-1\nendaligned","category":"page"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"where lambda_x and lambda_y correspond to periodic boundary conditions in the horizontal and lambda_z to Neumann boundary conditions in the vertical.","category":"page"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"There is also an ambiguity in the solution to Poisson's equation as it's only defined up to a constant. To resolve this we choose the solution with zero mean by setting the zeroth Fourier coefficient phi_000 (corresponding to k_x = k_y = k_z = 0) to zero. This also has the added benefit of discarding the zero eigenvalue so we don't divide by it.","category":"page"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"The Fast Fourier transforms are computed using FFTW.jl \\citep{Frigo98,Frigo05} on the CPU and using the cuFFT library on the GPU. Along wall-bouded dimensions, the cosine transform is used. In particular, as the transforms are performed on a staggered grid, DCT-II (REDFT10) is used to perform the forward cosine transform and DCT-III (REDFT01) is used to perform the inverse cosine transform.","category":"page"},{"location":"manual/poisson_solvers/#Direct-method-with-a-vertically-stretched-grid-1","page":"Poisson solvers","title":"Direct method with a vertically stretched grid","text":"","category":"section"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"Using Fourier transforms for all three dimensions results in a method requiring mathcalO(N log_2 N) operations where N is the total number of grid points. This algorithm can be made even more efficient by solving a tridiagonal system along one of the dimensions and utilizing cyclic reduction. This results in the Fourier analysis cyclic reduction or textFACR(ell) algorithm (with ell cyclic reduction steps) which requires only mathcalO(N log_2log_2 N) operations provided the optimal number of cyclic reduction steps is taken, which is ell = log_2 log_2 n where n is the number of grid points in the cyclic reduction dimension. The FACR algorithm was first developed by \\citet{Hockney69} and is well reviewed by \\citet{Swarztrauber77} then further benchmarked and extended by \\citet{Temperton79} and \\citet{Temperton80}.","category":"page"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"Furthermore, the FACR algorithm removes the restriction that the grid is uniform in one of the dimensions so it can be utilized to implement a fast Poisson solver for vertically stretched grids if the cyclic reduction is applied in the along the vertical dimension.","category":"page"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"Expanding phi_NH and mathscrF into Fourier modes along the x and y directions","category":"page"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"phi_ijk = sum_m=1^N_x sum_n=1^N_y tildephi_mnk  e^-i2pi im  N_x   e^-i2pi jn  N_y","category":"page"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"and recalling that Fourier transforms do partial_x rightarrow ik_x and partial_y rightarrow ik_y we can write \\eqref{eq:poisson-pressure} as","category":"page"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"sum_m=1^N_x sum_n=1^N_y\nleftlbrace\n    partial_z^2 tildephi_mnk - (k_x^2 + k_y^2) tildephi_mnk - tildemathscrF_mnk\nrightrbrace e^-i2pi im  N_x  e^-i2pi jn  N_y = 0","category":"page"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"Discretizing the partial_z^2 derivative and equating the term inside the brackets to zero we arrive at N_xtimes N_y symmetric tridiagonal systems of N_z linear equations for the Fourier modes:","category":"page"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"fractildephi_mnk-1Delta z^F_k-1\n- leftlbrace frac11Delta z^F_k-1 + 1Delta z^F_k + Delta z^C_k (k_x^2 + k_y^2) rightrbrace\n  tildephi_mnk\n+ fractildephi_mnk+1Delta z^F_k\n= Delta z^C_k tildemathscrF_mnk","category":"page"},{"location":"manual/poisson_solvers/#Cosine-transforms-on-the-GPU-1","page":"Poisson solvers","title":"Cosine transforms on the GPU","text":"","category":"section"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"Unfortunately cuFFT does not provide cosine transforms and so we must write our own fast cosine transforms for the GPU. We implemented the fast 1D and 2D cosine transforms described by \\citet{Makhoul80} which compute it by applying the regular Fourier transform to a permuted version of the array.","category":"page"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"In this section we will be using the DCT-II as the definition of the forward cosine transform for a real signal of length N","category":"page"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"  textDCT(X) quad Y_k = 2 sum_j=0^N-1 cos left fracpi(j + frac12)kN right X_j","category":"page"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"and the DCT-III as the definition of the inverse cosine transform","category":"page"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"  textIDCT(X) quad Y_k = X_0 + 2 sum_j=1^N-1 cos left fracpi j (k + frac12)N right X_j","category":"page"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"and will use omega_M = e^-2pi iM to denote the M^textth root of unity, sometimes called the twiddle factors in the context of FFT algorithms.","category":"page"},{"location":"manual/poisson_solvers/#D-fast-cosine-transform-1","page":"Poisson solvers","title":"1D fast cosine transform","text":"","category":"section"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"To calculate \\eqref{eq:FCT} using the fast Fourier transform, we first permute the input signal along the appropriate dimension by ordering the odd elements first followed by the even elements to produce a permuted signal","category":"page"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"    X^prime_n =\n    begincases\n        displaystyle X_2N quad 0 le n le left fracN-12 right \n        displaystyle X_2N - 2n - 1 quad left fracN+12 right le n le N-1\n    endcases","category":"page"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"where a indicates the integer part of a. This should produce, for example,","category":"page"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"    (a b c d e f g h) quad rightarrow quad (a c e g h f d b)","category":"page"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"after which \\eqref{eq:FCT} is computed using","category":"page"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"  Y = textDCT(X) = 2 textRe leftlbrace omega_4N^k textFFT lbrace X^prime rbrace rightrbrace","category":"page"},{"location":"manual/poisson_solvers/#D-fast-inverse-cosine-transform-1","page":"Poisson solvers","title":"1D fast inverse cosine transform","text":"","category":"section"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"The inverse \\eqref{eq:IFCT} can be computed using","category":"page"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"  Y = textIDCT(X) = textRe leftlbrace omega_4N^-k textIFFT lbrace X rbrace rightrbrace","category":"page"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"after which the inverse permutation of \\eqref{eq:permutation} must be applied.","category":"page"},{"location":"manual/poisson_solvers/#D-fast-cosine-transform-2","page":"Poisson solvers","title":"2D fast cosine transform","text":"","category":"section"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"Unfortunately, the 1D algorithm cannot be applied dimension-wise so the 2D algorithm is  more complicated. Thankfully though, the permutation \\eqref{eq:permutation} can be applied dimension-wise. The forward cosine transform for a real signal of length N_1 times N_2 is then given by","category":"page"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"Y_k_1 k_2 = textDCT(X_n_1 n_2) =\n2 textRe leftlbrace\n    omega_4N_1^k left( omega_4N_2^k tildeX + omega_4N_2^-k tildeX^- right)\nrightrbrace","category":"page"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"where tildeX = textFFT(X^prime) and tildeX^- indicates that tildeX is indexed in reverse.","category":"page"},{"location":"manual/poisson_solvers/#D-fast-inverse-cosine-transform-2","page":"Poisson solvers","title":"2D fast inverse cosine transform","text":"","category":"section"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"The inverse can be computed using","category":"page"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"Y_k_1 k_2 = textIDCT(X_n_1 n_2) =\nfrac14 textRe leftlbrace\n    omega_4N_1^-k omega_4N_2^-k\n    left( tildeX - M_1 M_2 tildeX^-- right)\n    - i left( M_1 tildeX^-+ + M_2 tildeX^+- right)\nrightrbrace","category":"page"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"where tildeX = textIFFT(X) here, tildeX^-+ is indexed in reverse along the first dimension, tildeX^-+ along the second dimension, and tildeX^-- along both. M_1 and M_2 are masks of lengths N_1 and N_2 respectively, both containing ones except at the first element where M_0 = 0. Afterwards, the inverse permutation of \\eqref{eq:permutation} must be applied.","category":"page"},{"location":"manual/poisson_solvers/#","page":"Poisson solvers","title":"Poisson solvers","text":"Due to the extra steps involved in calculating the cosine transform in 2D, running with two wall-bounded dimensions typically slows the model down by a factor of 2. Switching to the FACR algorithm may help here as a 2D cosine transform won't be neccessary anymore.","category":"page"},{"location":"manual/turbulence_closures/#Turbulence-closures-1","page":"Turbulence closures","title":"Turbulence closures","text":"","category":"section"},{"location":"manual/turbulence_closures/#","page":"Turbulence closures","title":"Turbulence closures","text":"To truly simulate and resolve turbulence at high Reynolds number (so basically all interesting flows) would require you resolve all motions down to the \\citet{Kolmogorov41} length scale eta = (nu^3  varepsilon)^14 where nu is the kinematic viscosity and varepsilon the average rate of dissipation of turbulence kinetic energy per unit mass.","category":"page"},{"location":"manual/turbulence_closures/#","page":"Turbulence closures","title":"Turbulence closures","text":"As pointed out way back by \\citet{Corrsin61}, to run a simulation on a horizontal domain about 10 times the size of an \"average eddy\" with 100 vertical levels and where the grid spacing is given by eta would require the computer to store on the order of 10^14 variables.[1] This is still impractical today, although may be within reach in less than a decade. He ends by suggesting the use of an analog rather digital computer–-a tank of water.","category":"page"},{"location":"manual/turbulence_closures/#","page":"Turbulence closures","title":"Turbulence closures","text":"[1]: And even then, eta gives the maximum allowable grid spacing. There is significant flow structure smaller than eta.","category":"page"},{"location":"manual/turbulence_closures/#","page":"Turbulence closures","title":"Turbulence closures","text":"To have any hope of simulating high Reynolds number flows we need some way of resolving the sub-grid scale motions.[2]","category":"page"},{"location":"manual/turbulence_closures/#","page":"Turbulence closures","title":"Turbulence closures","text":"[2]: In reality there is no need to resolve all motions down to the Kolmogorov length scale to achieve acceptable accuracy. Perhaps good results can be achieved if 80\\% of the kinetic energy is resolved \\citep[\\S13]{Pope00}.","category":"page"},{"location":"manual/turbulence_closures/#Reynolds-averaged-Navier–Stokes-equations-1","page":"Turbulence closures","title":"Reynolds-averaged Navier–Stokes equations","text":"","category":"section"},{"location":"manual/turbulence_closures/#","page":"Turbulence closures","title":"Turbulence closures","text":"Following \\citet{Reynolds1895} we can decompose flow variables such as velocity bmu into the mean component overlinebmu and the fluctuating component bmu^prime so that bmu = overlinebmu + bmu^prime [see \\citet[\\S4]{Pope00} for a modern discussion].","category":"page"},{"location":"manual/turbulence_closures/#","page":"Turbulence closures","title":"Turbulence closures","text":"Expressing the Navier-Stokes equations in tensor notation","category":"page"},{"location":"manual/turbulence_closures/#","page":"Turbulence closures","title":"Turbulence closures","text":"beginaligned\n    partial_i u_i = 0 \n    partial_t u_i + u_j partial_j u_i = f_i - alphapartial_i p + nu partial_j partial_j u_i\nendaligned","category":"page"},{"location":"manual/turbulence_closures/#","page":"Turbulence closures","title":"Turbulence closures","text":"where alpha = rho^-1 is the specific volume and f_i represents external forces. We can plug in the Reynolds decomposition for bmu and after some manipulation arrive at the following form for the Reynolds-averaged Navier-Stokes equations","category":"page"},{"location":"manual/turbulence_closures/#","page":"Turbulence closures","title":"Turbulence closures","text":"beginaligned\n    partial_i overlineu_i = 0 \n    partial_t overlineu_i + overlineu_j partial_j overlineu_i = overlinef_i -\n    partial_j left(-alphaoverlinepdelta_ij + 2nu overlineS_ij - overlineu_i^prime u_j^primeright)\nendaligned","category":"page"},{"location":"manual/turbulence_closures/#","page":"Turbulence closures","title":"Turbulence closures","text":"where","category":"page"},{"location":"manual/turbulence_closures/#","page":"Turbulence closures","title":"Turbulence closures","text":"overlineS_ij = frac12 ( partial_j overlineu_i + partial_i overlineu_j )","category":"page"},{"location":"manual/turbulence_closures/#","page":"Turbulence closures","title":"Turbulence closures","text":"is the mean rate of strain tensor.","category":"page"},{"location":"manual/turbulence_closures/#","page":"Turbulence closures","title":"Turbulence closures","text":"Thanks to the non-linearity of the Navier-Stokes equations, even when averaged we are left with pesky fluctuation terms which form the components of the Reynolds stress tensor","category":"page"},{"location":"manual/turbulence_closures/#","page":"Turbulence closures","title":"Turbulence closures","text":"tau_ij = rho overlineu_i^prime u_j^prime","category":"page"},{"location":"manual/turbulence_closures/#","page":"Turbulence closures","title":"Turbulence closures","text":"Attempting to close the equations leads to the closure problem: the time evolution of the Reynolds stresses depends on  triple covariances overlineu_i^prime u_j^prime u_k^prime and covariances with pressure, which depend on quadruple covariances and so on \\citep{Chou45}.","category":"page"},{"location":"manual/turbulence_closures/#","page":"Turbulence closures","title":"Turbulence closures","text":"This is kind of hopeless so we will have to find some way to model the Reynolds stresses.","category":"page"},{"location":"manual/turbulence_closures/#Gradient-diffusion-hypothesis-and-eddy-viscosity-models-1","page":"Turbulence closures","title":"Gradient-diffusion hypothesis and eddy viscosity models","text":"","category":"section"},{"location":"manual/turbulence_closures/#","page":"Turbulence closures","title":"Turbulence closures","text":"The gradient-diffusion hypothesis, due to \\citet{Boussinesq1877}, assumes that the transport of scalar fluxes such as overlinebmu^prime c^prime and overlineu_i^prime u_j^prime occurs down the mean scalar gradient grad c as if they are being diffused \\citep[\\S4.4]{Pope00}. This is in analogy with how momentum transfer by molecular motion in a gas can be described by a molecular viscosity.","category":"page"},{"location":"manual/turbulence_closures/#","page":"Turbulence closures","title":"Turbulence closures","text":"Taking this assumption we can express the Reynolds stresses and turbulent tracer fluxes in terms of the mean variables and close the equations","category":"page"},{"location":"manual/turbulence_closures/#","page":"Turbulence closures","title":"Turbulence closures","text":"overlinebmu^prime c^prime = -kappa_e nabla overlinec\nquad textand quad\noverlineu_i^prime u_j^prime = -2nu_e overlineS_ij","category":"page"},{"location":"manual/turbulence_closures/#","page":"Turbulence closures","title":"Turbulence closures","text":"where nu_e = nu_e(bmx t) is the turbulent or eddy viscosity and kappa_e = kappa_e(bmx t) is the eddy diffusivity.","category":"page"},{"location":"manual/turbulence_closures/#","page":"Turbulence closures","title":"Turbulence closures","text":"The effective diffusivity ends up being the sum of the molecular and eddy diffusivities. So just by using an elevated value for the viscosity and diffusivity, you are already using an eddy viscosity model.","category":"page"},{"location":"manual/turbulence_closures/#","page":"Turbulence closures","title":"Turbulence closures","text":"The eddy viscosity model is simple and for that reason is very popular. It can work well even with a constant eddy diffusivity. However, it does assume that the flux is aligned down gradient, which is not true even in simple turbulent flows as the physics of turbulence is quite different from that of colliding molecules leading to the viscous stress law \\citep[\\S4.4,10.1]{Pope00}. So we might want something a little bit more sophisticated.","category":"page"},{"location":"manual/staggered_grid/#Staggered-grid-1","page":"Staggered grid","title":"Staggered grid","text":"","category":"section"},{"location":"manual/staggered_grid/#","page":"Staggered grid","title":"Staggered grid","text":"Velocities u, v, and w are defined on the faces of the cells, which are coincident with three orthogonal coordinate axes (the Cartesian axes in the case of Oceananigans). Pressure p and tracers c are stored at the cell  centers as cell averages. See figure \\ref{fig:staggered_grid} for a schematic of the different control volumes. Other quantities may be defined at other locations. For example, vorticity bmomega = nablatimesbmu is defined at the cell edges.[1]","category":"page"},{"location":"manual/staggered_grid/#","page":"Staggered grid","title":"Staggered grid","text":"[1]: In 2D it would more correct to say the cell corners. In 3D, variables like vorticity lie at the same vertical levels as the cell-centered variables and so they really lie at the cell edges.","category":"page"},{"location":"manual/staggered_grid/#","page":"Staggered grid","title":"Staggered grid","text":"(Image: Schematic of control volumes) Figure 1: A schematic of the control volumes in a two-dimensional staggered grid. Note that pressure p (and tracers) is defined at the center of the control volume. The u control volumes are centered on the left and right edges of the pressure control volume while the v control volumes are centered on the top and bottom edges of the pressure control volumes. Figure credit: \\citet{Kumar16}","category":"page"},{"location":"manual/staggered_grid/#","page":"Staggered grid","title":"Staggered grid","text":"This staggered arrangement of variables is more complicated than the collocated grid arrangement but is greatly beneficial as it avoids the odd-even decoupling between the pressure and velocity if they are stored at the same positions. \\citet[\\S6.1]{Patankar80} discusses this problem in the presence of a zigzag pressure field: on a 1D collocated grid the velocity at the point i is influenced by the pressure at points i-1 and i+1, and a zigzag pressure field will be felt as a uniform pressure, which is obviously wrong and would reduce the accuracy of the solution. The pressure is effectively taken from a coarser grid than what is actually used. The basic problem is that the momentum equations will use the pressure difference between two alternate points when it should be using two adjacent points.","category":"page"},{"location":"manual/staggered_grid/#","page":"Staggered grid","title":"Staggered grid","text":"From the viewpoint of linear algebra, these spurious pressure modes correspond to solutions in the null space of the pressure projection operator with eigenvalue zero and are thus indistinguishable from a uniform pressure field \\citep{Sani81}.","category":"page"},{"location":"manual/staggered_grid/#","page":"Staggered grid","title":"Staggered grid","text":"The staggered grid was first introduced by \\citet{Harlow65} with their \\emph{marker and cell} method. In meteorology and oceanography, the staggered grid is usually referred to as the Arakawa C-grid after \\citet{Arakawa77}, who investigated four different staggered grids and the unstaggered A-grid for use in an atmospheric model.","category":"page"},{"location":"manual/staggered_grid/#","page":"Staggered grid","title":"Staggered grid","text":"\\citet{Arakawa77} investigated the dispersion relation of intertia-gravity waves[2] travelling in the x-direction","category":"page"},{"location":"manual/staggered_grid/#","page":"Staggered grid","title":"Staggered grid","text":"  omega^2 = f^2 + gHk^2","category":"page"},{"location":"manual/staggered_grid/#","page":"Staggered grid","title":"Staggered grid","text":"in the linearized rotating shallow-water equations for five grids. Here omega is the angular frequency, H is the height of the fluid and k is the wavenumber in the x-direction. Looking at the effect of spatial discretization error on the frequency of these waves they find that the B and C-grids reproduce the dispersion relation most closely out of the five \\citep[Figure 5]{Arakawa77}. In particular, the dispersion relation for the C-grid is given by","category":"page"},{"location":"manual/staggered_grid/#","page":"Staggered grid","title":"Staggered grid","text":"  omega^2 = f^2 left cos^2 left( frackDelta2 right)\n             + 4 left( fraclambdaDelta right)^2 sin^2 left( frackDelta2 right) right","category":"page"},{"location":"manual/staggered_grid/#","page":"Staggered grid","title":"Staggered grid","text":"where lambda is the wavelength and Delta is the grid spacing. Paraphrasing \\citet[p. 184]{Arakawa77}: The wavelength of the shortest resolvable wave is 2Delta with corresponding wavenumber k = piDelta so it is sufficient to evaluate the dispersion relation over the range 0  kDelta  pi. The frequency is monotonically increasing for lambdaDelta  frac12 and monotonically decreasing for lambdaDelta  frac12. For the fourth smallest wave lambdaDelta = frac12 we get omega^2 = f^2 which matches the k = 0 wave. Furthermore, the group velocity is zero for all k. On the other grids, waves with kDelta = pi can behave like pure intertial oscillations or stationary waves, which is bad.","category":"page"},{"location":"manual/staggered_grid/#","page":"Staggered grid","title":"Staggered grid","text":"The B and C-grids are less oscillatory than the others and quite faithfully simulate geostrophic adjustment. However, the C-grid is the only one that faithfully reproduces the two-dimensional dispersion relation omega^2(k ell), all the other grids have false maxima, and so \\citet{Arakawa77} conclude that the C-grid is best for simulating geostrophic adjustment except for abnormal situations in which lambdaDelta is less than or close to 1. This seems to have held true for most atmospheric and oceanographic simulations as the C-grid is popular and widely used.","category":"page"},{"location":"manual/staggered_grid/#","page":"Staggered grid","title":"Staggered grid","text":"[2]: Apparently also called Poincaré waves, Sverdrup waves, and \\emph{rotational gravity waves} \\citep[\\S13.9]{Kundu15}.","category":"page"},{"location":"verification/lid_driven_cavity/#Lid-driven-cavity-1","page":"Lid-driven cavity","title":"Lid-driven cavity","text":"","category":"section"},{"location":"verification/lid_driven_cavity/#","page":"Lid-driven cavity","title":"Lid-driven cavity","text":"The lid-driven cavity test problem has been used for a long time as a simple verification test for computational fluid dynamics codes. First described by \\citet{Burggraf66}, the fluid is contained in a square cavity with Dirchlet boundary conditions on all four sides. The top wall moves with some velocity U while the other three walls are stationary. The solution reaches a laminar steady-state whose properties can be compared with a huge amount of existing data. The canonical database is given by \\citet{Ghia82} who report detailed information on the velocity fields as well as the streamline and vorticity contours at various Reynolds numbers. More accurate data is reported by \\citet{Botella98}, \\citet{Erturk05}, and \\citet{Bruneau06}.","category":"page"},{"location":"gallery/#Gallery-1","page":"Gallery","title":"Gallery","text":"","category":"section"},{"location":"gallery/#","page":"Gallery","title":"Gallery","text":"Collection of cool movies!","category":"page"},{"location":"gallery/#[Deep-convection](https://www.youtube.com/watch?vkpUrxnKKMjI)-1","page":"Gallery","title":"Deep convection","text":"","category":"section"},{"location":"gallery/#","page":"Gallery","title":"Gallery","text":"An idealized simulation of deep convection in the ocean. The simulation employs a resolution of 256x256x128 volumes in a 2x2x1 km horizontally periodic domain. Heat is sucked out of the ocean surface within a cooling disk of radius 600 m at a rate of 800 W/m² which cools the surface water and making it denser. This cold dense water then sinks into the ocean interior, initiating a convective process that penetrates deep into the ocean.","category":"page"},{"location":"gallery/#","page":"Gallery","title":"Gallery","text":"This deep convection process can happen when a cold storm passes through warmer waters, which happens for example in the Labrador Sea.","category":"page"},{"location":"gallery/#","page":"Gallery","title":"Gallery","text":"The video shows the temperature field and the domain is sliced in half so the convection happening under the cooling disk is clear.","category":"page"},{"location":"gallery/#","page":"Gallery","title":"Gallery","text":"(Image: Watch deep convection in action)","category":"page"},{"location":"gallery/#[Free-convection](https://www.youtube.com/watch?vyq4op9h3xcU)-1","page":"Gallery","title":"Free convection","text":"","category":"section"},{"location":"gallery/#","page":"Gallery","title":"Gallery","text":"An idealized simulation of free convection in the ocean. The simulation employs a resolution of 256x256x256 volumes in a 100x100x100 m horizontally periodic domain. Heat is sucked out of the ocean surface at a rate of 75 W/m² which cools the surface water and making it denser. This cold dense water then sinks into the ocean interior, initiating a convective process that keeps mixing the upper layer of the ocean. This \"mixed layer\" has a relatively constant temperature and keeps deepening as the surface is cooled.","category":"page"},{"location":"gallery/#","page":"Gallery","title":"Gallery","text":"The video shows the temperature field and the domain is sliced in half.","category":"page"},{"location":"gallery/#","page":"Gallery","title":"Gallery","text":"(Image: Watch free convection in action)","category":"page"},{"location":"gallery/#[Winds-blowing-over-the-ocean](https://www.youtube.com/watch?vIRncfbvuiy8)-1","page":"Gallery","title":"Winds blowing over the ocean","text":"","category":"section"},{"location":"gallery/#","page":"Gallery","title":"Gallery","text":"An idealized simulation of a strong wind stress acting on the surface of a stratified ocean. The simulation employs a resolution of 256x256x256 volumes in a 100x100x100 m horizontally periodic domain. A pretty strong wind stress of 0.1 N/m² is applied in the x direction which mechanically mixes the upper layer of the ocean. This leads to a \"mixed layer\" of constant temperature near the surface of the ocean. You can also see the onset of Kelvin-Helmholtz instabilities as the mechanical mixing sets in.","category":"page"},{"location":"gallery/#","page":"Gallery","title":"Gallery","text":"The video shows the temperature field in the top 25 meters and the domain is sliced in half for visualization. The line plots show the horizontally averaged temperature profile (top right), horizontally averaged turbulent kinetic energy (middle right), and the horizontally averaged buoyancy flux (or temperature flux).","category":"page"},{"location":"gallery/#","page":"Gallery","title":"Gallery","text":"(Image: Watch winds blowing over the ocean)","category":"page"},{"location":"gallery/#[Free-convection-with-wind-stress](https://www.youtube.com/watch?vob6OMQgPfI4)-1","page":"Gallery","title":"Free convection with wind stress","text":"","category":"section"},{"location":"gallery/#","page":"Gallery","title":"Gallery","text":"An idealized simulation of a strong wind stress acting on the surface of a stratified ocean along with a cooling flux that sucks heat out of the surface. The simulation employs a resolution of 256x256x256 volumes in a 100x100x100 m horizontally periodic domain. A pretty strong wind stress of 0.1 N/m² is applied in the x direction which mechanically mixes the upper layer of the ocean. Also, heat is sucked out of the ocean surface at a rate of 75 W/m² which cools the surface water and making it denser. This cold dense water then sinks into the ocean interior, initiating a convective process that keeps mixing the upper layer of the ocean. This leads to a \"mixed layer\" of constant temperature near the surface of the ocean. You can also see the onset of Kelvin-Helmholtz instabilities as the mechanical mixing sets in.","category":"page"},{"location":"gallery/#","page":"Gallery","title":"Gallery","text":"The video shows the temperature field and the domain is sliced in half for visualization. The line plots show the horizontally averaged temperature profile (top right), horizontally averaged turbulent kinetic energy (middle right), and the horizontally averaged buoyancy flux (or temperature flux). The unusual periodic prism colormap is used to show the fine details at the surface as it cools and the layers of different temperatures (the isopycnals) being perturbed by internal waves.","category":"page"},{"location":"gallery/#","page":"Gallery","title":"Gallery","text":"(Image: Watch free convection with wind stress in action)","category":"page"},{"location":"generated/ocean_wind_mixing_and_convection/#","page":"Ocean wind mixing and convection","title":"Ocean wind mixing and convection","text":"EditURL = \"https://github.com/climate-machine/Oceananigans.jl/blob/master/examples/ocean_wind_mixing_and_convection.jl\"","category":"page"},{"location":"generated/ocean_wind_mixing_and_convection/#Wind-and-convection-driven-mixing-in-an-ocean-surface-boundary-layer-1","page":"Ocean wind mixing and convection","title":"Wind and convection-driven mixing in an ocean surface boundary layer","text":"","category":"section"},{"location":"generated/ocean_wind_mixing_and_convection/#","page":"Ocean wind mixing and convection","title":"Ocean wind mixing and convection","text":"This example simulates mixing by three-dimensional turbulence in an ocean surface boundary layer driven by atmospheric winds and convection. It demonstrates:","category":"page"},{"location":"generated/ocean_wind_mixing_and_convection/#","page":"Ocean wind mixing and convection","title":"Ocean wind mixing and convection","text":"how to use the SeawaterBuoyancy model for buoyancy with a linear equation of state;\nhow to use a turbulence closure for large eddy simulation;\nhow to use a function to impose a boundary condition;\nhow to use user-defined model.parameters in a boundary condition function.","category":"page"},{"location":"generated/ocean_wind_mixing_and_convection/#","page":"Ocean wind mixing and convection","title":"Ocean wind mixing and convection","text":"In addition to Oceananigans.jl we need PyPlot for plotting, Random for generating random initial conditions, and Printf for printing progress messages. We also need Oceananigans.OutputWriters and Oceananigans.Diagnostics to access some nice features for writing output data to disk.","category":"page"},{"location":"generated/ocean_wind_mixing_and_convection/#","page":"Ocean wind mixing and convection","title":"Ocean wind mixing and convection","text":"using Oceananigans, Oceananigans.OutputWriters, Oceananigans.Diagnostics\nusing PyPlot, Random, Printf","category":"page"},{"location":"generated/ocean_wind_mixing_and_convection/#Model-parameters-1","page":"Ocean wind mixing and convection","title":"Model parameters","text":"","category":"section"},{"location":"generated/ocean_wind_mixing_and_convection/#","page":"Ocean wind mixing and convection","title":"Ocean wind mixing and convection","text":"Here we use an isotropic, cubic grid with Nz grid points and grid spacing Δz = 1 meter. We specify fluxes of heat, momentum, and salinity via","category":"page"},{"location":"generated/ocean_wind_mixing_and_convection/#","page":"Ocean wind mixing and convection","title":"Ocean wind mixing and convection","text":"A temperature flux Qᵀ at the top of the domain, which is related to heat flux  by Qᵀ = Qʰ / (ρ₀ * cᴾ), where Qʰ is the heat flux, ρ₀ is a reference density,  and cᴾ is the heat capacity of seawater. With a reference density  ρ₀ = 1026 kg m⁻³and heat capacity cᴾ = 3991, our chosen temperature flux of  Qᵀ = 5 × 10⁻⁵ K m⁻¹ s⁻¹ corresponds to a heat flux of Qʰ = 204.7 W m⁻², a  relatively powerful cooling rate.\nA velocity flux Qᵘ at the top of the domain, which is related  to the x momentum flux τˣ via τˣ = ρ₀ * Qᵘ, where ρ₀ is a reference density.  Our chosen value of Qᵘ = -2 × 10⁻⁵ m² s⁻² roughly corresponds to atmospheric winds  of uᵃ = 2.9 m s⁻¹ in the positive x-direction, using the parameterization  τ = 0.0025 * |uᵃ| * uᵃ.\nAn evaporation rate evaporation = 10⁻⁷ m s⁻¹, or approximately 0.1 millimeter per  hour.","category":"page"},{"location":"generated/ocean_wind_mixing_and_convection/#","page":"Ocean wind mixing and convection","title":"Ocean wind mixing and convection","text":"Finally, we use an initial temperature gradient of ∂T/∂z = 0.005 K m⁻¹, which implies an iniital buoyancy frequency N² = α * g * ∂T/∂z = 9.8 × 10⁻⁶ s⁻² with a thermal expansion coefficient α = 2 × 10⁻⁴ K⁻¹ and gravitational acceleration g = 9.81 s⁻². Note that, by default, the SeawaterBuoyancy model uses a gravitational acceleration gᴱᵃʳᵗʰ = 9.80665 s⁻².","category":"page"},{"location":"generated/ocean_wind_mixing_and_convection/#","page":"Ocean wind mixing and convection","title":"Ocean wind mixing and convection","text":"         Nz = 48       # Number of grid points in x, y, z\n         Δz = 1.0      # Grid spacing in x, y, z (meters)\n         Qᵀ = 5e-5     # Temperature flux at surface\n         Qᵘ = -2e-5    # Velocity flux at surface\n       ∂T∂z = 0.005    # Initial vertical temperature gradient\nevaporation = 1e-7     # Mass-specific evaporation rate [m s⁻¹]\n   end_time = 2hour    # End time for the simulation\n          f = 1e-4     # Coriolis parameter\n          α = 2e-4     # Thermal expansion coefficient\n          β = 8e-4     # Haline contraction coefficient","category":"page"},{"location":"generated/ocean_wind_mixing_and_convection/#Boundary-conditions-1","page":"Ocean wind mixing and convection","title":"Boundary conditions","text":"","category":"section"},{"location":"generated/ocean_wind_mixing_and_convection/#","page":"Ocean wind mixing and convection","title":"Ocean wind mixing and convection","text":"Here we define Flux boundary conditions at the surface for u, T, and S, and a Gradient boundary condition on T that maintains a constant stratification at the bottom. Our flux boundary condition for salinity uses a function that calculates the salinity flux in terms of the evaporation rate.","category":"page"},{"location":"generated/ocean_wind_mixing_and_convection/#","page":"Ocean wind mixing and convection","title":"Ocean wind mixing and convection","text":"u_bcs = HorizontallyPeriodicBCs(top = BoundaryCondition(Flux, Qᵘ))\n\nT_bcs = HorizontallyPeriodicBCs(   top = BoundaryCondition(Flux, Qᵀ),\n                                bottom = BoundaryCondition(Gradient, ∂T∂z))\n\n# Salinity flux: Qˢ = - E * S\n@inline Qˢ(i, j, grid, time, iter, U, C, p) = @inbounds -p.evaporation * C.S[i, j, 1]\n\nS_bcs = HorizontallyPeriodicBCs(top = BoundaryCondition(Flux, Qˢ))","category":"page"},{"location":"generated/ocean_wind_mixing_and_convection/#Model-instantiation-1","page":"Ocean wind mixing and convection","title":"Model instantiation","text":"","category":"section"},{"location":"generated/ocean_wind_mixing_and_convection/#","page":"Ocean wind mixing and convection","title":"Ocean wind mixing and convection","text":"We instantiate a horizontally-periodic Model on the CPU with on a RegularCartesianGrid, using a FPlane model for rotation (constant rotation rate), a linear equation of state for temperature and salinity, the Anisotropic Minimum Dissipation closure to model the effects of unresolved turbulence, and the previously defined boundary conditions for u, T, and S. We also pass the evaporation rate to the container model.parameters for use in the boundary condition function that calculates the salinity flux.","category":"page"},{"location":"generated/ocean_wind_mixing_and_convection/#","page":"Ocean wind mixing and convection","title":"Ocean wind mixing and convection","text":"model = Model(\n         architecture = CPU(),\n                 grid = RegularCartesianGrid(size=(Nz, Nz, Nz), length=(Δz*Nz, Δz*Nz, Δz*Nz)),\n             coriolis = FPlane(f=f),\n             buoyancy = SeawaterBuoyancy(equation_of_state=LinearEquationOfState(α=α, β=β)),\n              closure = AnisotropicMinimumDissipation(),\n  boundary_conditions = BoundaryConditions(u=u_bcs, T=T_bcs, S=S_bcs),\n           parameters = (evaporation = evaporation,)\n)","category":"page"},{"location":"generated/ocean_wind_mixing_and_convection/#","page":"Ocean wind mixing and convection","title":"Ocean wind mixing and convection","text":"Notes:","category":"page"},{"location":"generated/ocean_wind_mixing_and_convection/#","page":"Ocean wind mixing and convection","title":"Ocean wind mixing and convection","text":"To use the Smagorinsky-Lilly turbulence closure (with a constant model coefficient) rather than AnisotropicMinimumDissipation, use closure = ConstantSmagorinsky() in the model constructor.\nTo change the architecture to GPU, replace the architecture keyword argument with architecture = GPU()`","category":"page"},{"location":"generated/ocean_wind_mixing_and_convection/#","page":"Ocean wind mixing and convection","title":"Ocean wind mixing and convection","text":"Set makeplot = true to live-update a plot of vertical velocity, temperature, and salinity as the simulation runs.","category":"page"},{"location":"generated/ocean_wind_mixing_and_convection/#","page":"Ocean wind mixing and convection","title":"Ocean wind mixing and convection","text":"makeplot = false","category":"page"},{"location":"generated/ocean_wind_mixing_and_convection/#Initial-conditions-1","page":"Ocean wind mixing and convection","title":"Initial conditions","text":"","category":"section"},{"location":"generated/ocean_wind_mixing_and_convection/#","page":"Ocean wind mixing and convection","title":"Ocean wind mixing and convection","text":"Out initial condition for temperature consists of a linear stratification superposed with random noise damped at the walls, while our initial condition for velocity consists only of random noise.","category":"page"},{"location":"generated/ocean_wind_mixing_and_convection/#","page":"Ocean wind mixing and convection","title":"Ocean wind mixing and convection","text":"# Random noise damped at top and bottom\nΞ(z) = randn() * z / model.grid.Lz * (1 + z / model.grid.Lz) # noise\n\n# Temperature initial condition: a stable density tradient with random noise superposed.\nT₀(x, y, z) = 20 + ∂T∂z * z + ∂T∂z * model.grid.Lz * 1e-1 * Ξ(z)\n\n# Velocity initial condition: random noise scaled by the friction velocity.\nu₀(x, y, z) = sqrt(abs(Qᵘ)) * 1e-1 * Ξ(z)\n\nset!(model, u=u₀, w=u₀, T=T₀, S=35)","category":"page"},{"location":"generated/ocean_wind_mixing_and_convection/#Set-up-output-1","page":"Ocean wind mixing and convection","title":"Set up output","text":"","category":"section"},{"location":"generated/ocean_wind_mixing_and_convection/#","page":"Ocean wind mixing and convection","title":"Ocean wind mixing and convection","text":"We set up an output writer that saves all velocity fields, tracer fields, and the subgrid turbulent diffusivity associated with model.closure. The prefix keyword argument to JLD2OutputWriter indicates that output will be saved in ocean_wind_mixing_and_convection.jld2.","category":"page"},{"location":"generated/ocean_wind_mixing_and_convection/#","page":"Ocean wind mixing and convection","title":"Ocean wind mixing and convection","text":"# Create a NamedTuple containing all the fields to be outputted.\nfields_to_output = merge(model.velocities, model.tracers, (νₑ=model.diffusivities.νₑ,))\n\n# Instantiate a JLD2OutputWriter to write fields.\nfield_writer = JLD2OutputWriter(model, FieldOutputs(fields_to_output); interval=hour/4,\n                                prefix=\"ocean_wind_mixing_and_convection\", force=true)\n\n# Add the output writer to the models `output_writers`.\nmodel.output_writers[:fields] = field_writer;","category":"page"},{"location":"generated/ocean_wind_mixing_and_convection/#Running-the-simulation-1","page":"Ocean wind mixing and convection","title":"Running the simulation","text":"","category":"section"},{"location":"generated/ocean_wind_mixing_and_convection/#","page":"Ocean wind mixing and convection","title":"Ocean wind mixing and convection","text":"To run the simulation, we instantiate a TimeStepWizard to ensure stable time-stepping with a Courant-Freidrichs-Lewy (CFL) number of 0.2.","category":"page"},{"location":"generated/ocean_wind_mixing_and_convection/#","page":"Ocean wind mixing and convection","title":"Ocean wind mixing and convection","text":"wizard = TimeStepWizard(cfl=0.2, Δt=1.0, max_change=1.1, max_Δt=5.0)","category":"page"},{"location":"generated/ocean_wind_mixing_and_convection/#","page":"Ocean wind mixing and convection","title":"Ocean wind mixing and convection","text":"A diagnostic that returns the maximum absolute value of w by calling wmax(model):","category":"page"},{"location":"generated/ocean_wind_mixing_and_convection/#","page":"Ocean wind mixing and convection","title":"Ocean wind mixing and convection","text":"wmax = FieldMaximum(abs, model.velocities.w);","category":"page"},{"location":"generated/ocean_wind_mixing_and_convection/#","page":"Ocean wind mixing and convection","title":"Ocean wind mixing and convection","text":"We also create a figure and define a plotting function for live plotting of results.","category":"page"},{"location":"generated/ocean_wind_mixing_and_convection/#","page":"Ocean wind mixing and convection","title":"Ocean wind mixing and convection","text":"fig, axs = subplots(ncols=3, figsize=(12, 5))\n\n\"\"\"\n    makeplot!(axs, model)\n\nMake a triptych of x-z slices of vertical velocity, temperature, and salinity\nassociated with `model` in `axs`.\n\"\"\"\nfunction makeplot!(axs, model)\n    jhalf = floor(Int, model.grid.Nz/2)\n\n    # Coordinate arrays for plotting\n    xC = repeat(model.grid.xC, 1, model.grid.Nz)\n    zF = repeat(reshape(model.grid.zF[1:end-1], 1, model.grid.Nz), model.grid.Nx, 1)\n    zC = repeat(reshape(model.grid.zC, 1, model.grid.Nz), model.grid.Nx, 1)\n\n    sca(axs[1]); cla()\n    title(\"Vertical velocity\")\n    pcolormesh(xC, zF, Array(interior(model.velocities.w))[:, jhalf, :])\n    xlabel(\"\\$ x \\$ (m)\"); ylabel(\"\\$ z \\$ (m)\")\n\n    sca(axs[2]); cla()\n    title(\"Temperature\")\n    pcolormesh(xC, zC, Array(interior(model.tracers.T))[:, jhalf, :])\n    xlabel(\"\\$ x \\$ (m)\")\n\n    sca(axs[3]); cla()\n    title(\"Salinity\")\n    pcolormesh(xC, zC, Array(interior(model.tracers.S))[:, jhalf, :])\n    xlabel(\"\\$ x \\$ (m)\")\n\n    [ax.set_aspect(1) for ax in axs]\n    pause(0.01)\n\n    return nothing\nend","category":"page"},{"location":"generated/ocean_wind_mixing_and_convection/#","page":"Ocean wind mixing and convection","title":"Ocean wind mixing and convection","text":"Finally, we run the the model in a while loop.","category":"page"},{"location":"generated/ocean_wind_mixing_and_convection/#","page":"Ocean wind mixing and convection","title":"Ocean wind mixing and convection","text":"while model.clock.time < end_time\n\n    # Update the time step associated with `wizard`.\n    update_Δt!(wizard, model)\n\n    # Time step the model forward\n    walltime = @elapsed time_step!(model, 100, wizard.Δt)\n\n    # Print a progress message\n    @printf(\"i: %04d, t: %s, Δt: %s, wmax = %.1e ms⁻¹, wall time: %s\\n\",\n            model.clock.iteration, prettytime(model.clock.time), prettytime(wizard.Δt),\n            wmax(model), prettytime(walltime))\n\n    makeplot && makeplot!(axs, model)\nend","category":"page"},{"location":"generated/ocean_wind_mixing_and_convection/#","page":"Ocean wind mixing and convection","title":"Ocean wind mixing and convection","text":"Show the reults in a plot","category":"page"},{"location":"generated/ocean_wind_mixing_and_convection/#","page":"Ocean wind mixing and convection","title":"Ocean wind mixing and convection","text":"makeplot!(axs, model)\ngcf()","category":"page"},{"location":"generated/ocean_wind_mixing_and_convection/#","page":"Ocean wind mixing and convection","title":"Ocean wind mixing and convection","text":"This page was generated using Literate.jl.","category":"page"},{"location":"manual/boundary_conditions/#Numerical-implementation-of-boundary-conditions-1","page":"Boundary conditions","title":"Numerical implementation of boundary conditions","text":"","category":"section"},{"location":"manual/boundary_conditions/#","page":"Boundary conditions","title":"Boundary conditions","text":"We adopt a mixed approach for implementing boundary conditions that uses both halo regions and \"direct\"  imposition of boundary conditions, depending on the condition prescribed. We illustrate how boundary conditions are implemented by considering the tracer equation \\eqref{eq:tracer}.","category":"page"},{"location":"manual/boundary_conditions/#Gradient-boundary-conditions-1","page":"Boundary conditions","title":"Gradient boundary conditions","text":"","category":"section"},{"location":"manual/boundary_conditions/#","page":"Boundary conditions","title":"Boundary conditions","text":"Users impose gradient boundary conditions by prescribing the gradient gamma of a field c across a  external boundary partial Omega_b.  The prescribed gradient gamma may be a constant, discrete array of values, or an arbitrary function.  The gradient boundary condition is enforced setting the value of halo points located outside the domain interior such that ","category":"page"},{"location":"manual/boundary_conditions/#","page":"Boundary conditions","title":"Boundary conditions","text":"    tageqgradient-bc\n    hatbmn bmcdot bmnabla c _partial Omega_b = gamma  ","category":"page"},{"location":"manual/boundary_conditions/#","page":"Boundary conditions","title":"Boundary conditions","text":"where hatbmn is the vector normal to partial Omega_b.","category":"page"},{"location":"manual/boundary_conditions/#","page":"Boundary conditions","title":"Boundary conditions","text":"Across the bottom boundary in z, for example, this requires that","category":"page"},{"location":"manual/boundary_conditions/#","page":"Boundary conditions","title":"Boundary conditions","text":"    tageqlinear-extrapolation\n    c_i j 0 = c_i j 1 + gamma_i j 1 tfrac12 left ( Delta z_i j 1 + Delta z_i j 0 right )  ","category":"page"},{"location":"manual/boundary_conditions/#","page":"Boundary conditions","title":"Boundary conditions","text":"where Delta z_i j 1 = Delta z_i j 0 are the heights of the finite volume at i j and k=1 and k=0.  This prescription implies that the z-derivative of c across the boundary at k=1 is","category":"page"},{"location":"manual/boundary_conditions/#","page":"Boundary conditions","title":"Boundary conditions","text":"    partial_z c  _i j 1 equiv \n        fracc_i j 1 - c_i j 0tfrac12 left ( Delta z_i j 1 + Delta z_i j 0 right ) \n            = gamma_i j 1  ","category":"page"},{"location":"manual/boundary_conditions/#","page":"Boundary conditions","title":"Boundary conditions","text":"as prescribed by the user.","category":"page"},{"location":"manual/boundary_conditions/#Value-boundary-conditions-1","page":"Boundary conditions","title":"Value boundary conditions","text":"","category":"section"},{"location":"manual/boundary_conditions/#","page":"Boundary conditions","title":"Boundary conditions","text":"Users impose value boundary conditions by prescribing c^b, the value of c on the external  boundary partial Omega_b. The value c^b may be a constant, array of discrete values, or an arbitrary function. To enforce a value boundary condition, the gradient associated with the difference between  c^b and c at boundary-adjacent nodes is diagnosed and used to set the value of the c halo point  located outside the boundary.","category":"page"},{"location":"manual/boundary_conditions/#","page":"Boundary conditions","title":"Boundary conditions","text":"At the bottom boundary in z, for example, this means that the gradient of c is determined by","category":"page"},{"location":"manual/boundary_conditions/#","page":"Boundary conditions","title":"Boundary conditions","text":"gamma = fracc_i j 1 - c^b_i j 1tfrac12 Delta z_i j 1  ","category":"page"},{"location":"manual/boundary_conditions/#","page":"Boundary conditions","title":"Boundary conditions","text":"which is then used to set the halo point c_i j 0 via linear extrapolation.","category":"page"},{"location":"manual/boundary_conditions/#Flux-boundary-conditions-1","page":"Boundary conditions","title":"Flux boundary conditions","text":"","category":"section"},{"location":"manual/boundary_conditions/#","page":"Boundary conditions","title":"Boundary conditions","text":"Users impose flux boundary conditions by prescribing the flux q_c  _b of c across  the external boundary partial Omega_b.  The flux q_c  _b may be a constant, array of discrete values, or arbitrary function.  To explain how flux boundary conditions are imposed in Oceananigans.jl, we note that  the average of the tracer conservation equation over a finite volume yields","category":"page"},{"location":"manual/boundary_conditions/#","page":"Boundary conditions","title":"Boundary conditions","text":"    partial_t c_i j k = underbrace - frac1V_i j k oint_partial Omega_i j k bmu c + bmq_c  rmd S \n                                          + frac1V_i j k int_V_i j k F_c  rmd V _equiv G_c _i j k  ","category":"page"},{"location":"manual/boundary_conditions/#","page":"Boundary conditions","title":"Boundary conditions","text":"where the surface integral over partial Omega_i j k averages the flux of c across the six faces of the finite volume.","category":"page"},{"location":"manual/boundary_conditions/#","page":"Boundary conditions","title":"Boundary conditions","text":"An external boundary of a finite volume is associated with a no-penetration condition such that  hatbmn bmcdot bmu  _partial Omega_b = 0, where hatbmn is the vector normal to partial Omega_b. Furthermore, the closures currently available in \\texttt{Oceananigans.jl} have the property that bmq_c propto bmnabla c. Thus setting hatbmn bmcdot bmnabla c  _partial Omega_b = 0 on the external boundary implies that the total  flux of c across the external boundary is","category":"page"},{"location":"manual/boundary_conditions/#","page":"Boundary conditions","title":"Boundary conditions","text":"hatbmn bmcdot left ( bmu c + bmq_c right ) _partial Omega_b = 0  ","category":"page"},{"location":"manual/boundary_conditions/#","page":"Boundary conditions","title":"Boundary conditions","text":"Oceananigans.jl exploits this fact to define algorithm that prescribe fluxes across external boundaries partial Omega_b:","category":"page"},{"location":"manual/boundary_conditions/#","page":"Boundary conditions","title":"Boundary conditions","text":"Impose a constant gradient hatbmn bmcdot bmnabla c  _partial Omega_b = 0 across external boundaries   via using halo points (similar to \\eqref{eq:gradient-bc}), which ensures that the evaluation of G_c in boundary-adjacent   cells does not include fluxes across the external boundary, and;\nAdd the prescribed flux to the boundary-adjacent volumes prior to calculating G_c\nG_c  _b = G_c  _b - fracA_bV_b q_c  _b  textsign(hatbmn)  \nwhere G_c  _b denotes values of G_c in boundary-adjacent volumes, q_c  _b is the flux prescribed along the boundary,   V_b is the volume of the boundary-adjacent cell, and A_b is the area of the external boundary of the boundary-adjacent cell.\nThe factor textsign(hatbmn) is -1 and +1 on \"left\" and \"right\" boundaries, and accounts for the fact that a positive   flux on a left boundary where textsign(hatbmn) = -1 implies an \"inward\" flux of c that increases interior values of c,   whereas a positive flux on a right boundary where textsign(hatbmn) = 1 implies an \"outward\" flux that decreases interior   values of c.","category":"page"},{"location":"generated/simple_diffusion/#","page":"One-dimensional diffusion","title":"One-dimensional diffusion","text":"EditURL = \"https://github.com/climate-machine/Oceananigans.jl/blob/master/examples/simple_diffusion.jl\"","category":"page"},{"location":"generated/simple_diffusion/#Simple-diffusion-example-1","page":"One-dimensional diffusion","title":"Simple diffusion example","text":"","category":"section"},{"location":"generated/simple_diffusion/#","page":"One-dimensional diffusion","title":"One-dimensional diffusion","text":"This script provides our simplest example of Oceananigans.jl functionality: the diffusion of a one-dimensional Gaussian. This example demonstrates","category":"page"},{"location":"generated/simple_diffusion/#","page":"One-dimensional diffusion","title":"One-dimensional diffusion","text":"how to load Oceananigans.jl;\nhow to instantiate an Oceananigans.jl Model;\nhow to set an initial condition with a function;\nhow to time-step a model forward, and finally\nhow to look at results.","category":"page"},{"location":"generated/simple_diffusion/#Using-Oceananigans.jl-1","page":"One-dimensional diffusion","title":"Using Oceananigans.jl","text":"","category":"section"},{"location":"generated/simple_diffusion/#","page":"One-dimensional diffusion","title":"One-dimensional diffusion","text":"To use Oceananigans.jl after it has been installed, we bring Oceananigans.jl functions and names into our 'namespace' by writing","category":"page"},{"location":"generated/simple_diffusion/#","page":"One-dimensional diffusion","title":"One-dimensional diffusion","text":"using Oceananigans","category":"page"},{"location":"generated/simple_diffusion/#","page":"One-dimensional diffusion","title":"One-dimensional diffusion","text":"We also use PyPlot.jl for plotting and Printf to format plot legends:","category":"page"},{"location":"generated/simple_diffusion/#","page":"One-dimensional diffusion","title":"One-dimensional diffusion","text":"using PyPlot, Printf","category":"page"},{"location":"generated/simple_diffusion/#Instantiating-and-configuring-a-Model-1","page":"One-dimensional diffusion","title":"Instantiating and configuring a Model","text":"","category":"section"},{"location":"generated/simple_diffusion/#","page":"One-dimensional diffusion","title":"One-dimensional diffusion","text":"To begin using Oceananigans, we instantiate a Model by calling the Model constructor:","category":"page"},{"location":"generated/simple_diffusion/#","page":"One-dimensional diffusion","title":"One-dimensional diffusion","text":"model = Model(\n    grid = RegularCartesianGrid(size = (1, 1, 128), length = (1, 1, 1)),\n    closure = ConstantIsotropicDiffusivity(κ = 1.0)\n)","category":"page"},{"location":"generated/simple_diffusion/#","page":"One-dimensional diffusion","title":"One-dimensional diffusion","text":"The keyword arguments grid and closure indicate that our model grid is Cartesian with uniform grid spacing, that our diffusive stress and tracer fluxes are determined by diffusion with a constant diffusivity κ (note that we do not use viscosity in this example).","category":"page"},{"location":"generated/simple_diffusion/#","page":"One-dimensional diffusion","title":"One-dimensional diffusion","text":"Note that by default, a Model has no-flux boundary condition on all variables. Next, we set an initial condition on our \"passive tracer\", temperature. Our objective is to observe the diffusion of a Gaussian.","category":"page"},{"location":"generated/simple_diffusion/#","page":"One-dimensional diffusion","title":"One-dimensional diffusion","text":"# Build a Gaussian initial condition function with width `δ`:\nδ = 0.1\nTᵢ(x, y, z) = exp( -(z + 0.5)^2 / (2δ^2) )\n\n# Set `model.tracers.T` to the function `Tᵢ`:\nset!(model, T=Tᵢ)","category":"page"},{"location":"generated/simple_diffusion/#Running-your-first-Model-1","page":"One-dimensional diffusion","title":"Running your first Model","text":"","category":"section"},{"location":"generated/simple_diffusion/#","page":"One-dimensional diffusion","title":"One-dimensional diffusion","text":"Finally, we time-step the model forward using the function time_step!, with a time-step size that ensures numerical stability.","category":"page"},{"location":"generated/simple_diffusion/#","page":"One-dimensional diffusion","title":"One-dimensional diffusion","text":"# Time-scale for diffusion across a grid cell\ncell_diffusion_time_scale = model.grid.Δz^2 / model.closure.κ.T\n\n# The function `time_step!` executes `Nt` time steps with step size `Δt`\n# using a second-order Adams-Bashforth method\ntime_step!(model, Nt = 1000, Δt = 0.1 * cell_diffusion_time_scale)","category":"page"},{"location":"generated/simple_diffusion/#Visualizing-the-results-1","page":"One-dimensional diffusion","title":"Visualizing the results","text":"","category":"section"},{"location":"generated/simple_diffusion/#","page":"One-dimensional diffusion","title":"One-dimensional diffusion","text":"We use PyPlot.jl to look at the results.","category":"page"},{"location":"generated/simple_diffusion/#","page":"One-dimensional diffusion","title":"One-dimensional diffusion","text":"# A convenient function for generating a label with the Current model time\ntracer_label(model) = @sprintf(\"\\$ t=%.3f \\$\", model.clock.time)\n\n# Create a figure with `PyPlot.jl`\nclose(\"all\")\nfig, ax = subplots()\ntitle(\"Diffusion of a Gaussian\")\nxlabel(\"Tracer concentration\")\nylabel(L\"z\")\n\n# Plot initial condition\nplot(Tᵢ.(0, 0, model.grid.zC), model.grid.zC, \"--\", label=L\"t=0\")\n\n# Plot current solution\nplot(interior(model.tracers.T)[1, 1, :], model.grid.zC, label=tracer_label(model))\nlegend()\ngcf()","category":"page"},{"location":"generated/simple_diffusion/#","page":"One-dimensional diffusion","title":"One-dimensional diffusion","text":"Interesting! Running the model even longer makes even more interesting results.","category":"page"},{"location":"generated/simple_diffusion/#","page":"One-dimensional diffusion","title":"One-dimensional diffusion","text":"for i = 1:3\n    time_step!(model, Nt = 1000, Δt = 0.1 * cell_diffusion_time_scale)\n    plot(interior(model.tracers.T)[1, 1, :], model.grid.zC, label=tracer_label(model))\nend\n\nlegend()\ngcf()","category":"page"},{"location":"generated/simple_diffusion/#","page":"One-dimensional diffusion","title":"One-dimensional diffusion","text":"This page was generated using Literate.jl.","category":"page"},{"location":"manual/fractional_step/#Fractional-step-method-1","page":"Fractional step method","title":"Fractional step method","text":"","category":"section"},{"location":"manual/fractional_step/#","page":"Fractional step method","title":"Fractional step method","text":"Solving the momentum equation \\eqref{eq:momentumFV} coupled with the continuity equation \\eqref{eq:continuityFV} can be cumbersome so instead we employ a fractional step method. To approximate the solution of the coupled system we first solve an approximation to the discretized momentum equation \\eqref{eq:momentumFV} for an intermediate velocity field bmu^star without worrying about satisfying the incompressibility constraint. We then project bmu^star onto the space of divergence-free velocity fields to obtain a value for bmu^n+1 that satisfies \\eqref{eq:continuityFV}.","category":"page"},{"location":"manual/fractional_step/#","page":"Fractional step method","title":"Fractional step method","text":"We thus discretize the momentum equation as","category":"page"},{"location":"manual/fractional_step/#","page":"Fractional step method","title":"Fractional step method","text":"renewcommanddiv1 nabla cdotp left ( 1 right )\nfracbmu^star - bmu^nDelta t\n  = - left bmu cdot nablabmu right^n+frac12\n  - 2bmOmegatimesbmu^n+frac12\n  + divnunablabmu^n+frac12\n  + bmF^n+frac12","category":"page"},{"location":"manual/fractional_step/#","page":"Fractional step method","title":"Fractional step method","text":"where the superscript n + frac12 indicates that these terms are evaluated at time step n + frac12, which we compute explicitly (see \\S\\ref{sec:time-stepping}).","category":"page"},{"location":"manual/fractional_step/#","page":"Fractional step method","title":"Fractional step method","text":"The projection is then performed","category":"page"},{"location":"manual/fractional_step/#","page":"Fractional step method","title":"Fractional step method","text":"   bmu^n+1 = bmu^star - Delta t nabla phi^n+1","category":"page"},{"location":"manual/fractional_step/#","page":"Fractional step method","title":"Fractional step method","text":"to obtain a divergence-free velocity field bmu^n+1. Here the projection is performed by solving an elliptic problem for the pressure phi^n+1 with the boundary condition","category":"page"},{"location":"manual/fractional_step/#","page":"Fractional step method","title":"Fractional step method","text":"newcommanduvec1boldsymbolhattextbf1\n  bmhatn cdotp nablaphi^n+1 _partialOmega = 0","category":"page"},{"location":"manual/fractional_step/#","page":"Fractional step method","title":"Fractional step method","text":"\\citet{Orszag86} and \\citet{Brown01} raise an important issue regarding these fractional step methods, which is that \"while the velocity can be reliably computed to second-order accuracy in time and space, the pressure is typically only first-order accurate in the L_infty-norm.\" The numerical boundary conditions must be carefully accounted for to ensure the second-order accuracy promised by the fractional step methods.","category":"page"},{"location":"manual/fractional_step/#","page":"Fractional step method","title":"Fractional step method","text":"We are currently investigating whether our projection method is indeed second-order accurate in both velocity and pressure (see \\S\\ref{sec:forced-flow}). However, it may not matter too much for simulating high Reynolds number geophysical fluids as \\citet{Brown01} conclude that \"Quite often, semi-implicit projection methods are applied to problems in which the viscosity is small. Since the predicted first-order errors in the pressure are scaled by nu, it is not clear whether the improved pressure-update formula is beneficial in such situations. ... Finally, in some applications of projection methods, second-order accuracy in the pressure may not be relevant or in some cases even possible due to the treatment of other terms in the equations.\"","category":"page"},{"location":"#Oceananigans.jl-1","page":"Home","title":"Oceananigans.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"A fast and friendly incompressible fluid flow solver in Julia that can be run in 1-3 dimensions on CPUs and GPUs.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Oceananigans.jl is a fast and friendly incompressible fluid flow solver written in Julia that can be run in 1-3 dimensions on CPUs and GPUs. It simulates the rotating Boussinesq equations in rectangular domains with some  special features for fluids stratified by both temperature and salinity (oceans!) –- but can also be used without rotation, stratification, with aribtrary tracers, and arbitrary user-defined forcing functions.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"We strive for a user interface that makes Oceananigans.jl as friendly and intuitive to use as possible,  allowing users to focus on the science. Internally, we have attempted to write the underlying algorithm so that the code runs as fast as possible for the configuration chosen by the user –- from simple two-dimensional setups to complex three-dimensional simulations –- and so that as much code as possible is shared between the CPU and GPU algorithms.","category":"page"},{"location":"#Installation-instructions-1","page":"Home","title":"Installation instructions","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"You can install the latest version of Oceananigans using the built-in package manager (accessed by pressing ] in the Julia command prompt) to add the package and instantiate/build all depdendencies","category":"page"},{"location":"#","page":"Home","title":"Home","text":"julia>]\n(v1.1) pkg> add Oceananigans\n(v1.1) pkg> instantiate","category":"page"},{"location":"#","page":"Home","title":"Home","text":"We recommend installing Oceananigans with the built-in Julia package manager, because this installs a stable, tagged release. Oceananigans.jl can be updated to the latest tagged release from the package manager by typing","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(v1.1) pkg> update Oceananigans","category":"page"},{"location":"#","page":"Home","title":"Home","text":"At this time, updating should be done with care, as Oceananigans is under rapid development and breaking changes to the user API occur often. But if anything does happen, please open an issue!","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Note: Oceananigans requires at least Julia v1.1 to run correctly.","category":"page"},{"location":"#Getting-help-1","page":"Home","title":"Getting help","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"If you are interested in using Oceananigans.jl or are trying to figure out how to use it, please feel free to ask us questions and get in touch! Check out the examples and open an issue if you have any questions, comments, suggestions, etc.","category":"page"},{"location":"manual/large_eddy_simulation/#Large-eddy-simulation-1","page":"Large eddy simulation","title":"Large eddy simulation","text":"","category":"section"},{"location":"manual/large_eddy_simulation/#","page":"Large eddy simulation","title":"Large eddy simulation","text":"The idea behind large eddy simulation (LES) is to resolve the \"large eddies\" while modeling the effect of unresolved sub-grid scale motions. This is done usually be assuming eddy viscosity and eddy diffusivity models and providing an estimate for the eddy viscosity nu_e and diffusivity kappa_e.","category":"page"},{"location":"manual/large_eddy_simulation/#","page":"Large eddy simulation","title":"Large eddy simulation","text":"Much of the early work on LES was motivated by the study of atmospheric boundary layer turbulence, being developed by \\citet{Smagorinsky63} and \\citet{Lilly66}, then first implemented by \\citet{Deardorff70,Deardorff74}.","category":"page"},{"location":"manual/large_eddy_simulation/#","page":"Large eddy simulation","title":"Large eddy simulation","text":"In the LES framework, the Navier-Stokes equations are averaged in the same way as \\citet{Reynolds1895} except that the mean field overlinebmu is obtained via convolution with a filter convolution kernel~G","category":"page"},{"location":"manual/large_eddy_simulation/#","page":"Large eddy simulation","title":"Large eddy simulation","text":"overlinebmu(bmx t) = G star bmu =\n  int_-infty^infty int_-infty^infty\n  bmu(bmx^prime t) G(bmx - bmx^prime t - tau)  dbmx^prime  dtau","category":"page"},{"location":"manual/large_eddy_simulation/#","page":"Large eddy simulation","title":"Large eddy simulation","text":"as described by \\citet{Leonard75} who introduced the general filtering formalism.","category":"page"},{"location":"manual/large_eddy_simulation/#","page":"Large eddy simulation","title":"Large eddy simulation","text":"The overlineu_i^prime u_j^prime terms are now components of what is called the sub-grid scale (SGS) stress tensor tau^textSGS_ij, which looks the same as the Reynolds stress tensor so we will drop the SGS superscript.","category":"page"},{"location":"manual/large_eddy_simulation/#","page":"Large eddy simulation","title":"Large eddy simulation","text":"It is probably important to note that the large eddy simulation filtering operation does not satisfy the properties of a Reynolds operator \\citep[\\S 2.1]{sagaut06} and that in general, the filtered residual is not zero: overlinebmu^prime(bmx t) ne 0.","category":"page"},{"location":"manual/large_eddy_simulation/#","page":"Large eddy simulation","title":"Large eddy simulation","text":"\\citet[\\S13.2]{Pope00} lists a number of popular choices for the filter function G. For practical reasons we simply employ the box kernel","category":"page"},{"location":"manual/large_eddy_simulation/#","page":"Large eddy simulation","title":"Large eddy simulation","text":"  G_Delta = G(bmx t) = frac1Delta H left( frac12Delta - bmx right) delta(t - t_n)","category":"page"},{"location":"manual/large_eddy_simulation/#","page":"Large eddy simulation","title":"Large eddy simulation","text":"where H is the Heaviside function, Delta is the grid spacing, and t_n is the current time step. With \\eqref{eq:box-kernel} we get back the averaging operator originally used by \\citet{Deardorff70}","category":"page"},{"location":"manual/large_eddy_simulation/#","page":"Large eddy simulation","title":"Large eddy simulation","text":"overlinebmu(x y z t) =\n  frac1Delta x Delta y Delta z\n  int_x - frac12Delta x^x + frac12Delta x\n  int_y - frac12Delta y^y + frac12Delta y\n  int_z - frac12Delta z^z + frac12Delta z\n  bmu(xi eta zeta t)  dxi  deta  dzeta","category":"page"},{"location":"manual/large_eddy_simulation/#","page":"Large eddy simulation","title":"Large eddy simulation","text":"which if evaluated at the cell centers just returns the cell averages we already compute in the finite volume method.","category":"page"},{"location":"manual/large_eddy_simulation/#Smagorinsky-Lilly-model-1","page":"Large eddy simulation","title":"Smagorinsky-Lilly model","text":"","category":"section"},{"location":"manual/large_eddy_simulation/#","page":"Large eddy simulation","title":"Large eddy simulation","text":"\\citet{Smagorinsky63} estimated the eddy viscosity nu_e via a characteristic length scale Delta times a velocity scale given by Delta overlineS where overlineS = sqrt2overlineS_ijoverlineS_ij. Thus the SGS stress tensor is given by","category":"page"},{"location":"manual/large_eddy_simulation/#","page":"Large eddy simulation","title":"Large eddy simulation","text":"tau_ij = -2nu_e overlineS_ij = -2 (C_s Delta)^2 overlineS overlineS_ij","category":"page"},{"location":"manual/large_eddy_simulation/#","page":"Large eddy simulation","title":"Large eddy simulation","text":"where C_s is a dimensionless constant. The grid spacing is usually used for the characteristic length scale Delta. The eddy diffusivities are calculated via kappa_e = nu_e  textPr_t where the turbulent Prandtl number textPr_t is usually chosen to be mathcalO(1) from experimental observations.","category":"page"},{"location":"manual/large_eddy_simulation/#","page":"Large eddy simulation","title":"Large eddy simulation","text":"Assuming that the SGS energy cascade is equal to the overall dissipation rate varepsilon from the \\citet{Kolmogorov41} theory, \\citet{Lilly66} was able to derive a value of","category":"page"},{"location":"manual/large_eddy_simulation/#","page":"Large eddy simulation","title":"Large eddy simulation","text":"C_s = left( frac32C_Kpi^frac43 right)^-frac34 approx 016","category":"page"},{"location":"manual/large_eddy_simulation/#","page":"Large eddy simulation","title":"Large eddy simulation","text":"using an empirical value of C_K approx 16 for the Kolmogorov constant. This seems reasonable for isotropic turbulence if the grid spacing Delta falls in the intertial range. In practice, C_s is a tunable parameter.","category":"page"},{"location":"manual/large_eddy_simulation/#","page":"Large eddy simulation","title":"Large eddy simulation","text":"Due to the presence of the constant C_s, the model is sometimes referred to as the \\emph{constant Smagorinsky} model in contrast to \\emph{dynamic Smagorinsky} models that dynamically compute C_s to account for effects such as buoyant convection.","category":"page"},{"location":"manual/large_eddy_simulation/#Anisotropic-minimum-dissipation-models-1","page":"Large eddy simulation","title":"Anisotropic minimum dissipation models","text":"","category":"section"},{"location":"manual/large_eddy_simulation/#","page":"Large eddy simulation","title":"Large eddy simulation","text":"Minimum-dissipation eddy-viscosity models are a class of LES closures that use the minimum eddy dissipation required to dissipate the energy of sub-grid scale motion. \\citet{Rozema15} proposed the first minimum-dissipation model appropriate for use on anisotropic grids, termed the \\emph{anisotropic minimum dissipation} (AMD) model.","category":"page"},{"location":"manual/large_eddy_simulation/#","page":"Large eddy simulation","title":"Large eddy simulation","text":"It has a number of desirable properties over Smagorinsky-type closures: it is more cost-effective than dynamic Smagorinsky, it appropriately switches off in laminar and transitional flows, and it is consistent with the exact SGS stress tensor on both isotropic and anisotropic grids. \\citet{Abkar16} extended the AMD model to model SGS scalar fluxes for tracer transport. \\citet{Abkar17} further extended the model to include a buoyancy term that accounts for the contribution of buoyant forces to the production and suppression of turbulence.","category":"page"},{"location":"manual/large_eddy_simulation/#","page":"Large eddy simulation","title":"Large eddy simulation","text":"\\citet{Vreugdenhil18} derive a modified AMD model by following the requirement suggested by \\citet{Verstappen18}, which entail normalising the displacement, the velocity, and the velocity gradient by the filter width to ensure that the resulting eddy dissipation properly counteracts the spurious kinetic energy transferred by convective nonlinearity, to derive a modified AMD model.","category":"page"},{"location":"manual/large_eddy_simulation/#","page":"Large eddy simulation","title":"Large eddy simulation","text":"The eddy viscosity and diffusivity are defined in terms of eddy viscosity and diffusivity \\emph{predictors} nu_e^dagger and kappa_e^dagger, such that","category":"page"},{"location":"manual/large_eddy_simulation/#","page":"Large eddy simulation","title":"Large eddy simulation","text":"nu_e = textmax lbrace 0 nu_e^dagger rbrace\nquad textand quad\nkappa_e = textmax lbrace 0 kappa_e^dagger rbrace","category":"page"},{"location":"manual/large_eddy_simulation/#","page":"Large eddy simulation","title":"Large eddy simulation","text":"to ensure that nu_e ge 0 and kappa_e ge 0. Leaving out the overlines and understanding that all variables represent the resolved/filtered variables, the eddy viscosity predictor is given by","category":"page"},{"location":"manual/large_eddy_simulation/#","page":"Large eddy simulation","title":"Large eddy simulation","text":"nu_e^dagger = -(CDelta)^2\n  frac\n    left( hatpartial_k hatu_i right) left( hatpartial_k hatu_j right) hatS_ij\n    + C_bhatdelta_i3 alpha g left( hatpartial_k hatu_i right) hatpartial_k theta\n    left( hatpartial_l hatu_m right) left( hatpartial_l hatu_m right)","category":"page"},{"location":"manual/large_eddy_simulation/#","page":"Large eddy simulation","title":"Large eddy simulation","text":"and the eddy diffusivity predictor by","category":"page"},{"location":"manual/large_eddy_simulation/#","page":"Large eddy simulation","title":"Large eddy simulation","text":"kappa_e^dagger = -(CDelta)^2\nfrac\n    left( hatpartial_k hatu_i right) left( hatpartial_k hattheta right) hatpartial_i theta\n    left( hatpartial_l hattheta right) left( hatpartial_l hattheta right)","category":"page"},{"location":"manual/large_eddy_simulation/#","page":"Large eddy simulation","title":"Large eddy simulation","text":"where","category":"page"},{"location":"manual/large_eddy_simulation/#","page":"Large eddy simulation","title":"Large eddy simulation","text":"  hatx_i = fracx_iDelta_i quad\n  hatu_i(hatx t) = fracu_i(x t)Delta_i quad\n  hatpartial_i hatu_j(hatx t) = fracDelta_iDelta_j partial_i u_j(x t) quad\n  hatdelta_i3 = fracdelta_i3Delta 3","category":"page"},{"location":"manual/large_eddy_simulation/#","page":"Large eddy simulation","title":"Large eddy simulation","text":"so that the normalized rate of strain tensor is","category":"page"},{"location":"manual/large_eddy_simulation/#","page":"Large eddy simulation","title":"Large eddy simulation","text":"hatS_ij =\n  frac12 left hatpartial_i hatu_j(hatx t) + hatpartial_j hatu_i(hatx t) right","category":"page"},{"location":"manual/large_eddy_simulation/#","page":"Large eddy simulation","title":"Large eddy simulation","text":"In equations \\eqref{eq:nu-dagger}–\\eqref{eq:S-hat} C is a modified Poincaré \"constant\" that is independent from the filter width Delta but does depend on the accuracy of the discretization method used. \\citet{Abkar16} cite C^2 = frac112 for a spectral method and C^2 = frac13 for a second-order accurate scheme. Delta_i is the filter width in the x_i-direction, and Delta is given by the square root of the harmonic mean of the squares of the filter widths in each direction","category":"page"},{"location":"manual/large_eddy_simulation/#","page":"Large eddy simulation","title":"Large eddy simulation","text":"    frac1Delta^2 = frac13 left( frac1Delta x^2 + frac1Delta y^2 + frac1Delta z^2 right)","category":"page"},{"location":"manual/large_eddy_simulation/#","page":"Large eddy simulation","title":"Large eddy simulation","text":"The term multiplying C_b is the buoyancy modification introduced by \\citet{Abkar17} and is small for weakly stratified flows. We have introduced the C_b constant so that the buoyancy modification term may be turned on and off.","category":"page"}]
}
